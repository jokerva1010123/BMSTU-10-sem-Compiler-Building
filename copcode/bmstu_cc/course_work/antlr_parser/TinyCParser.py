# Generated from antlr_parser/TinyC.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,118,1292,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,1,0,3,0,176,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,5,
        1,185,8,1,10,1,12,1,188,9,1,1,2,1,2,1,2,3,2,193,8,2,1,3,3,3,196,
        8,3,1,3,1,3,3,3,200,8,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,5,4,209,8,4,
        10,4,12,4,212,9,4,1,5,1,5,1,5,4,5,217,8,5,11,5,12,5,218,1,5,1,5,
        1,5,1,5,1,5,1,5,3,5,227,8,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,247,8,5,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,262,8,7,10,7,12,7,265,9,
        7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,274,8,8,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,310,8,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,320,8,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,5,9,333,8,9,10,9,12,9,336,9,9,1,10,1,10,1,
        10,1,10,1,10,1,10,5,10,344,8,10,10,10,12,10,347,9,10,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,371,8,11,1,12,1,12,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,388,
        8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        5,14,402,8,14,10,14,12,14,405,9,14,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,5,15,416,8,15,10,15,12,15,419,9,15,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,5,16,430,8,16,10,16,12,16,433,9,16,
        1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,5,17,450,8,17,10,17,12,17,453,9,17,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,5,18,464,8,18,10,18,12,18,467,9,18,1,19,
        1,19,1,19,1,19,1,19,1,19,5,19,475,8,19,10,19,12,19,478,9,19,1,20,
        1,20,1,20,1,20,1,20,1,20,5,20,486,8,20,10,20,12,20,489,9,20,1,21,
        1,21,1,21,1,21,1,21,1,21,5,21,497,8,21,10,21,12,21,500,9,21,1,22,
        1,22,1,22,1,22,1,22,1,22,5,22,508,8,22,10,22,12,22,511,9,22,1,23,
        1,23,1,23,1,23,1,23,1,23,5,23,519,8,23,10,23,12,23,522,9,23,1,24,
        1,24,1,24,1,24,1,24,1,24,3,24,530,8,24,1,25,1,25,1,25,1,25,1,25,
        1,25,3,25,538,8,25,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,5,27,
        548,8,27,10,27,12,27,551,9,27,1,28,1,28,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,3,29,563,8,29,1,30,4,30,566,8,30,11,30,12,30,567,
        1,31,4,31,571,8,31,11,31,12,31,572,1,32,1,32,1,32,1,32,1,32,3,32,
        580,8,32,1,33,1,33,1,33,1,33,1,33,1,33,5,33,588,8,33,10,33,12,33,
        591,9,33,1,34,1,34,1,34,1,34,1,34,3,34,598,8,34,1,35,1,35,1,36,1,
        36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,
        36,3,36,617,8,36,1,36,1,36,5,36,621,8,36,10,36,12,36,624,9,36,1,
        37,1,37,3,37,628,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,637,
        8,37,1,38,1,38,1,39,1,39,1,39,1,39,1,39,5,39,646,8,39,10,39,12,39,
        649,9,39,1,40,1,40,3,40,653,8,40,1,40,1,40,1,40,3,40,658,8,40,1,
        41,1,41,3,41,662,8,41,1,41,1,41,3,41,666,8,41,3,41,668,8,41,1,42,
        1,42,1,42,1,42,1,42,1,42,5,42,676,8,42,10,42,12,42,679,9,42,1,43,
        1,43,3,43,683,8,43,1,43,1,43,3,43,687,8,43,1,44,1,44,3,44,691,8,
        44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,699,8,44,1,44,1,44,1,44,1,
        44,1,44,1,44,1,44,3,44,708,8,44,1,45,1,45,1,45,1,45,1,45,1,45,5,
        45,716,8,45,10,45,12,45,719,9,45,1,46,1,46,1,46,1,46,1,46,3,46,726,
        8,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,50,1,50,1,50,
        1,50,1,50,1,50,3,50,743,8,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,3,51,755,8,51,1,52,3,52,758,8,52,1,52,1,52,5,52,762,
        8,52,10,52,12,52,765,9,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
        1,53,3,53,776,8,53,1,53,1,53,1,53,3,53,781,8,53,1,53,3,53,784,8,
        53,1,53,1,53,1,53,1,53,1,53,3,53,791,8,53,1,53,1,53,1,53,1,53,1,
        53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,806,8,53,1,53,1,
        53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,818,8,53,1,53,5,
        53,821,8,53,10,53,12,53,824,9,53,1,54,1,54,1,54,4,54,829,8,54,11,
        54,12,54,830,1,54,1,54,3,54,835,8,54,1,55,1,55,1,55,1,55,1,55,1,
        55,1,55,1,56,1,56,1,56,5,56,847,8,56,10,56,12,56,850,9,56,1,56,3,
        56,853,8,56,1,57,1,57,1,57,3,57,858,8,57,1,57,3,57,861,8,57,1,57,
        3,57,864,8,57,1,58,1,58,1,58,1,58,1,58,5,58,871,8,58,10,58,12,58,
        874,9,58,1,59,1,59,3,59,878,8,59,1,59,1,59,3,59,882,8,59,1,59,1,
        59,1,59,3,59,887,8,59,1,59,1,59,3,59,891,8,59,1,59,3,59,894,8,59,
        1,60,1,60,1,60,1,60,1,60,5,60,901,8,60,10,60,12,60,904,9,60,1,61,
        1,61,1,61,1,61,1,61,3,61,911,8,61,1,62,1,62,1,62,1,62,1,62,1,62,
        5,62,919,8,62,10,62,12,62,922,9,62,1,63,1,63,1,63,1,63,1,63,3,63,
        929,8,63,3,63,931,8,63,1,64,1,64,1,64,1,64,1,64,1,64,5,64,939,8,
        64,10,64,12,64,942,9,64,1,65,1,65,3,65,946,8,65,1,66,1,66,3,66,950,
        8,66,1,66,1,66,5,66,954,8,66,10,66,12,66,957,9,66,3,66,959,8,66,
        1,67,1,67,1,67,1,67,1,67,5,67,966,8,67,10,67,12,67,969,9,67,1,67,
        1,67,3,67,973,8,67,1,67,3,67,976,8,67,1,67,1,67,1,67,1,67,3,67,982,
        8,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
        1,67,1,67,3,67,998,8,67,1,67,1,67,5,67,1002,8,67,10,67,12,67,1005,
        9,67,3,67,1007,8,67,1,67,1,67,1,67,3,67,1012,8,67,1,67,3,67,1015,
        8,67,1,67,1,67,1,67,1,67,1,67,3,67,1022,8,67,1,67,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
        3,67,1041,8,67,1,67,1,67,5,67,1045,8,67,10,67,12,67,1048,9,67,5,
        67,1050,8,67,10,67,12,67,1053,9,67,1,68,1,68,1,69,1,69,1,69,1,69,
        1,69,1,69,1,69,1,69,1,69,1,69,3,69,1067,8,69,1,70,1,70,3,70,1071,
        8,70,1,70,1,70,1,70,1,70,1,70,3,70,1078,8,70,1,70,5,70,1081,8,70,
        10,70,12,70,1084,9,70,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,5,
        72,1094,8,72,10,72,12,72,1097,9,72,1,73,1,73,1,73,1,73,1,73,1,73,
        3,73,1105,8,73,1,74,1,74,1,74,1,74,1,74,4,74,1112,8,74,11,74,12,
        74,1113,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,
        75,1,75,1,75,1,75,5,75,1131,8,75,10,75,12,75,1134,9,75,3,75,1136,
        8,75,1,75,1,75,1,75,1,75,5,75,1142,8,75,10,75,12,75,1145,9,75,3,
        75,1147,8,75,5,75,1149,8,75,10,75,12,75,1152,9,75,1,75,1,75,3,75,
        1156,8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
        3,76,1169,8,76,1,77,1,77,3,77,1173,8,77,1,77,1,77,1,78,1,78,1,78,
        1,78,1,78,5,78,1182,8,78,10,78,12,78,1185,9,78,1,79,1,79,3,79,1189,
        8,79,1,80,3,80,1192,8,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,3,81,1203,8,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1211,8,81,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1233,8,82,1,83,1,83,1,83,
        3,83,1238,8,83,1,83,1,83,3,83,1242,8,83,1,83,3,83,1245,8,83,1,83,
        1,83,3,83,1249,8,83,1,83,1,83,3,83,1253,8,83,3,83,1255,8,83,1,84,
        1,84,1,84,1,84,3,84,1261,8,84,1,85,1,85,1,85,1,85,1,85,1,85,5,85,
        1269,8,85,10,85,12,85,1272,9,85,1,86,1,86,1,86,1,86,1,86,1,86,1,
        86,1,86,1,86,3,86,1283,8,86,1,86,1,86,1,86,1,86,1,86,3,86,1290,8,
        86,1,86,0,30,2,8,14,18,20,28,30,32,34,36,38,40,42,44,46,54,66,72,
        78,84,90,106,120,124,128,134,140,144,156,170,87,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
        166,168,170,172,0,12,5,0,71,71,73,73,75,75,78,78,83,84,1,0,89,99,
        6,0,15,15,26,26,34,34,40,40,43,43,58,58,8,0,4,6,18,18,23,23,27,27,
        32,33,37,38,45,46,52,53,1,0,4,6,2,0,41,41,44,44,4,0,19,19,35,35,
        47,47,51,51,3,0,8,9,31,31,56,56,2,0,59,60,88,88,1,0,59,60,2,0,11,
        11,13,13,2,0,14,14,47,47,1407,0,175,1,0,0,0,2,179,1,0,0,0,4,192,
        1,0,0,0,6,195,1,0,0,0,8,203,1,0,0,0,10,246,1,0,0,0,12,248,1,0,0,
        0,14,255,1,0,0,0,16,273,1,0,0,0,18,309,1,0,0,0,20,337,1,0,0,0,22,
        370,1,0,0,0,24,372,1,0,0,0,26,387,1,0,0,0,28,389,1,0,0,0,30,406,
        1,0,0,0,32,420,1,0,0,0,34,434,1,0,0,0,36,454,1,0,0,0,38,468,1,0,
        0,0,40,479,1,0,0,0,42,490,1,0,0,0,44,501,1,0,0,0,46,512,1,0,0,0,
        48,523,1,0,0,0,50,537,1,0,0,0,52,539,1,0,0,0,54,541,1,0,0,0,56,552,
        1,0,0,0,58,562,1,0,0,0,60,565,1,0,0,0,62,570,1,0,0,0,64,579,1,0,
        0,0,66,581,1,0,0,0,68,597,1,0,0,0,70,599,1,0,0,0,72,616,1,0,0,0,
        74,636,1,0,0,0,76,638,1,0,0,0,78,640,1,0,0,0,80,657,1,0,0,0,82,667,
        1,0,0,0,84,669,1,0,0,0,86,686,1,0,0,0,88,707,1,0,0,0,90,709,1,0,
        0,0,92,725,1,0,0,0,94,727,1,0,0,0,96,729,1,0,0,0,98,734,1,0,0,0,
        100,742,1,0,0,0,102,754,1,0,0,0,104,757,1,0,0,0,106,775,1,0,0,0,
        108,834,1,0,0,0,110,836,1,0,0,0,112,852,1,0,0,0,114,863,1,0,0,0,
        116,872,1,0,0,0,118,893,1,0,0,0,120,895,1,0,0,0,122,910,1,0,0,0,
        124,912,1,0,0,0,126,930,1,0,0,0,128,932,1,0,0,0,130,943,1,0,0,0,
        132,958,1,0,0,0,134,1006,1,0,0,0,136,1054,1,0,0,0,138,1066,1,0,0,
        0,140,1068,1,0,0,0,142,1085,1,0,0,0,144,1088,1,0,0,0,146,1104,1,
        0,0,0,148,1106,1,0,0,0,150,1155,1,0,0,0,152,1168,1,0,0,0,154,1170,
        1,0,0,0,156,1176,1,0,0,0,158,1188,1,0,0,0,160,1191,1,0,0,0,162,1210,
        1,0,0,0,164,1232,1,0,0,0,166,1254,1,0,0,0,168,1260,1,0,0,0,170,1262,
        1,0,0,0,172,1289,1,0,0,0,174,176,3,2,1,0,175,174,1,0,0,0,175,176,
        1,0,0,0,176,177,1,0,0,0,177,178,5,0,0,1,178,1,1,0,0,0,179,180,6,
        1,-1,0,180,181,3,4,2,0,181,186,1,0,0,0,182,183,10,1,0,0,183,185,
        3,4,2,0,184,182,1,0,0,0,185,188,1,0,0,0,186,184,1,0,0,0,186,187,
        1,0,0,0,187,3,1,0,0,0,188,186,1,0,0,0,189,193,3,6,3,0,190,193,3,
        58,29,0,191,193,5,87,0,0,192,189,1,0,0,0,192,190,1,0,0,0,192,191,
        1,0,0,0,193,5,1,0,0,0,194,196,3,60,30,0,195,194,1,0,0,0,195,196,
        1,0,0,0,196,197,1,0,0,0,197,199,3,104,52,0,198,200,3,8,4,0,199,198,
        1,0,0,0,199,200,1,0,0,0,200,201,1,0,0,0,201,202,3,154,77,0,202,7,
        1,0,0,0,203,204,6,4,-1,0,204,205,3,58,29,0,205,210,1,0,0,0,206,207,
        10,1,0,0,207,209,3,58,29,0,208,206,1,0,0,0,209,212,1,0,0,0,210,208,
        1,0,0,0,210,211,1,0,0,0,211,9,1,0,0,0,212,210,1,0,0,0,213,247,5,
        105,0,0,214,247,5,106,0,0,215,217,5,108,0,0,216,215,1,0,0,0,217,
        218,1,0,0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,247,1,0,0,0,220,
        221,5,59,0,0,221,222,3,54,27,0,222,223,5,60,0,0,223,247,1,0,0,0,
        224,247,3,12,6,0,225,227,5,1,0,0,226,225,1,0,0,0,226,227,1,0,0,0,
        227,228,1,0,0,0,228,229,5,59,0,0,229,230,3,154,77,0,230,231,5,60,
        0,0,231,247,1,0,0,0,232,233,5,2,0,0,233,234,5,59,0,0,234,235,3,22,
        11,0,235,236,5,88,0,0,236,237,3,130,65,0,237,238,5,60,0,0,238,247,
        1,0,0,0,239,240,5,3,0,0,240,241,5,59,0,0,241,242,3,130,65,0,242,
        243,5,88,0,0,243,244,3,22,11,0,244,245,5,60,0,0,245,247,1,0,0,0,
        246,213,1,0,0,0,246,214,1,0,0,0,246,216,1,0,0,0,246,220,1,0,0,0,
        246,224,1,0,0,0,246,226,1,0,0,0,246,232,1,0,0,0,246,239,1,0,0,0,
        247,11,1,0,0,0,248,249,5,54,0,0,249,250,5,59,0,0,250,251,3,50,25,
        0,251,252,5,88,0,0,252,253,3,14,7,0,253,254,5,60,0,0,254,13,1,0,
        0,0,255,256,6,7,-1,0,256,257,3,16,8,0,257,263,1,0,0,0,258,259,10,
        1,0,0,259,260,5,88,0,0,260,262,3,16,8,0,261,258,1,0,0,0,262,265,
        1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,15,1,0,0,0,265,263,1,
        0,0,0,266,267,3,130,65,0,267,268,5,86,0,0,268,269,3,50,25,0,269,
        274,1,0,0,0,270,271,5,21,0,0,271,272,5,86,0,0,272,274,3,50,25,0,
        273,266,1,0,0,0,273,270,1,0,0,0,274,17,1,0,0,0,275,276,6,9,-1,0,
        276,310,3,10,5,0,277,278,5,59,0,0,278,279,3,130,65,0,279,280,5,60,
        0,0,280,281,5,63,0,0,281,282,3,140,70,0,282,283,5,64,0,0,283,310,
        1,0,0,0,284,285,5,59,0,0,285,286,3,130,65,0,286,287,5,60,0,0,287,
        288,5,63,0,0,288,289,3,140,70,0,289,290,5,88,0,0,290,291,5,64,0,
        0,291,310,1,0,0,0,292,293,5,1,0,0,293,294,5,59,0,0,294,295,3,130,
        65,0,295,296,5,60,0,0,296,297,5,63,0,0,297,298,3,140,70,0,298,299,
        5,64,0,0,299,310,1,0,0,0,300,301,5,1,0,0,301,302,5,59,0,0,302,303,
        3,130,65,0,303,304,5,60,0,0,304,305,5,63,0,0,305,306,3,140,70,0,
        306,307,5,88,0,0,307,308,5,64,0,0,308,310,1,0,0,0,309,275,1,0,0,
        0,309,277,1,0,0,0,309,284,1,0,0,0,309,292,1,0,0,0,309,300,1,0,0,
        0,310,334,1,0,0,0,311,312,10,10,0,0,312,313,5,61,0,0,313,314,3,54,
        27,0,314,315,5,62,0,0,315,333,1,0,0,0,316,317,10,9,0,0,317,319,5,
        59,0,0,318,320,3,20,10,0,319,318,1,0,0,0,319,320,1,0,0,0,320,321,
        1,0,0,0,321,333,5,60,0,0,322,323,10,8,0,0,323,324,5,103,0,0,324,
        333,5,105,0,0,325,326,10,7,0,0,326,327,5,102,0,0,327,333,5,105,0,
        0,328,329,10,6,0,0,329,333,5,72,0,0,330,331,10,5,0,0,331,333,5,74,
        0,0,332,311,1,0,0,0,332,316,1,0,0,0,332,322,1,0,0,0,332,325,1,0,
        0,0,332,328,1,0,0,0,332,330,1,0,0,0,333,336,1,0,0,0,334,332,1,0,
        0,0,334,335,1,0,0,0,335,19,1,0,0,0,336,334,1,0,0,0,337,338,6,10,
        -1,0,338,339,3,50,25,0,339,345,1,0,0,0,340,341,10,1,0,0,341,342,
        5,88,0,0,342,344,3,50,25,0,343,340,1,0,0,0,344,347,1,0,0,0,345,343,
        1,0,0,0,345,346,1,0,0,0,346,21,1,0,0,0,347,345,1,0,0,0,348,371,3,
        18,9,0,349,350,5,72,0,0,350,371,3,22,11,0,351,352,5,74,0,0,352,371,
        3,22,11,0,353,354,3,24,12,0,354,355,3,26,13,0,355,371,1,0,0,0,356,
        357,5,39,0,0,357,371,3,22,11,0,358,359,5,39,0,0,359,360,5,59,0,0,
        360,361,3,130,65,0,361,362,5,60,0,0,362,371,1,0,0,0,363,364,5,50,
        0,0,364,365,5,59,0,0,365,366,3,130,65,0,366,367,5,60,0,0,367,371,
        1,0,0,0,368,369,5,80,0,0,369,371,5,105,0,0,370,348,1,0,0,0,370,349,
        1,0,0,0,370,351,1,0,0,0,370,353,1,0,0,0,370,356,1,0,0,0,370,358,
        1,0,0,0,370,363,1,0,0,0,370,368,1,0,0,0,371,23,1,0,0,0,372,373,7,
        0,0,0,373,25,1,0,0,0,374,375,5,59,0,0,375,376,3,130,65,0,376,377,
        5,60,0,0,377,378,3,26,13,0,378,388,1,0,0,0,379,380,5,1,0,0,380,381,
        5,59,0,0,381,382,3,130,65,0,382,383,5,60,0,0,383,384,3,26,13,0,384,
        388,1,0,0,0,385,388,3,22,11,0,386,388,5,107,0,0,387,374,1,0,0,0,
        387,379,1,0,0,0,387,385,1,0,0,0,387,386,1,0,0,0,388,27,1,0,0,0,389,
        390,6,14,-1,0,390,391,3,26,13,0,391,403,1,0,0,0,392,393,10,3,0,0,
        393,394,5,75,0,0,394,402,3,26,13,0,395,396,10,2,0,0,396,397,5,76,
        0,0,397,402,3,26,13,0,398,399,10,1,0,0,399,400,5,77,0,0,400,402,
        3,26,13,0,401,392,1,0,0,0,401,395,1,0,0,0,401,398,1,0,0,0,402,405,
        1,0,0,0,403,401,1,0,0,0,403,404,1,0,0,0,404,29,1,0,0,0,405,403,1,
        0,0,0,406,407,6,15,-1,0,407,408,3,28,14,0,408,417,1,0,0,0,409,410,
        10,2,0,0,410,411,5,71,0,0,411,416,3,28,14,0,412,413,10,1,0,0,413,
        414,5,73,0,0,414,416,3,28,14,0,415,409,1,0,0,0,415,412,1,0,0,0,416,
        419,1,0,0,0,417,415,1,0,0,0,417,418,1,0,0,0,418,31,1,0,0,0,419,417,
        1,0,0,0,420,421,6,16,-1,0,421,422,3,30,15,0,422,431,1,0,0,0,423,
        424,10,2,0,0,424,425,5,69,0,0,425,430,3,30,15,0,426,427,10,1,0,0,
        427,428,5,70,0,0,428,430,3,30,15,0,429,423,1,0,0,0,429,426,1,0,0,
        0,430,433,1,0,0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,33,1,0,0,0,
        433,431,1,0,0,0,434,435,6,17,-1,0,435,436,3,32,16,0,436,451,1,0,
        0,0,437,438,10,4,0,0,438,439,5,65,0,0,439,450,3,32,16,0,440,441,
        10,3,0,0,441,442,5,67,0,0,442,450,3,32,16,0,443,444,10,2,0,0,444,
        445,5,66,0,0,445,450,3,32,16,0,446,447,10,1,0,0,447,448,5,68,0,0,
        448,450,3,32,16,0,449,437,1,0,0,0,449,440,1,0,0,0,449,443,1,0,0,
        0,449,446,1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,0,451,452,1,0,0,
        0,452,35,1,0,0,0,453,451,1,0,0,0,454,455,6,18,-1,0,455,456,3,34,
        17,0,456,465,1,0,0,0,457,458,10,2,0,0,458,459,5,100,0,0,459,464,
        3,34,17,0,460,461,10,1,0,0,461,462,5,101,0,0,462,464,3,34,17,0,463,
        457,1,0,0,0,463,460,1,0,0,0,464,467,1,0,0,0,465,463,1,0,0,0,465,
        466,1,0,0,0,466,37,1,0,0,0,467,465,1,0,0,0,468,469,6,19,-1,0,469,
        470,3,36,18,0,470,476,1,0,0,0,471,472,10,1,0,0,472,473,5,78,0,0,
        473,475,3,36,18,0,474,471,1,0,0,0,475,478,1,0,0,0,476,474,1,0,0,
        0,476,477,1,0,0,0,477,39,1,0,0,0,478,476,1,0,0,0,479,480,6,20,-1,
        0,480,481,3,38,19,0,481,487,1,0,0,0,482,483,10,1,0,0,483,484,5,82,
        0,0,484,486,3,38,19,0,485,482,1,0,0,0,486,489,1,0,0,0,487,485,1,
        0,0,0,487,488,1,0,0,0,488,41,1,0,0,0,489,487,1,0,0,0,490,491,6,21,
        -1,0,491,492,3,40,20,0,492,498,1,0,0,0,493,494,10,1,0,0,494,495,
        5,79,0,0,495,497,3,40,20,0,496,493,1,0,0,0,497,500,1,0,0,0,498,496,
        1,0,0,0,498,499,1,0,0,0,499,43,1,0,0,0,500,498,1,0,0,0,501,502,6,
        22,-1,0,502,503,3,42,21,0,503,509,1,0,0,0,504,505,10,1,0,0,505,506,
        5,80,0,0,506,508,3,42,21,0,507,504,1,0,0,0,508,511,1,0,0,0,509,507,
        1,0,0,0,509,510,1,0,0,0,510,45,1,0,0,0,511,509,1,0,0,0,512,513,6,
        23,-1,0,513,514,3,44,22,0,514,520,1,0,0,0,515,516,10,1,0,0,516,517,
        5,81,0,0,517,519,3,44,22,0,518,515,1,0,0,0,519,522,1,0,0,0,520,518,
        1,0,0,0,520,521,1,0,0,0,521,47,1,0,0,0,522,520,1,0,0,0,523,529,3,
        46,23,0,524,525,5,85,0,0,525,526,3,54,27,0,526,527,5,86,0,0,527,
        528,3,48,24,0,528,530,1,0,0,0,529,524,1,0,0,0,529,530,1,0,0,0,530,
        49,1,0,0,0,531,538,3,48,24,0,532,533,3,22,11,0,533,534,3,52,26,0,
        534,535,3,50,25,0,535,538,1,0,0,0,536,538,5,107,0,0,537,531,1,0,
        0,0,537,532,1,0,0,0,537,536,1,0,0,0,538,51,1,0,0,0,539,540,7,1,0,
        0,540,53,1,0,0,0,541,542,6,27,-1,0,542,543,3,50,25,0,543,549,1,0,
        0,0,544,545,10,1,0,0,545,546,5,88,0,0,546,548,3,50,25,0,547,544,
        1,0,0,0,548,551,1,0,0,0,549,547,1,0,0,0,549,550,1,0,0,0,550,55,1,
        0,0,0,551,549,1,0,0,0,552,553,3,48,24,0,553,57,1,0,0,0,554,555,3,
        60,30,0,555,556,3,66,33,0,556,557,5,87,0,0,557,563,1,0,0,0,558,559,
        3,60,30,0,559,560,5,87,0,0,560,563,1,0,0,0,561,563,3,148,74,0,562,
        554,1,0,0,0,562,558,1,0,0,0,562,561,1,0,0,0,563,59,1,0,0,0,564,566,
        3,64,32,0,565,564,1,0,0,0,566,567,1,0,0,0,567,565,1,0,0,0,567,568,
        1,0,0,0,568,61,1,0,0,0,569,571,3,64,32,0,570,569,1,0,0,0,571,572,
        1,0,0,0,572,570,1,0,0,0,572,573,1,0,0,0,573,63,1,0,0,0,574,580,3,
        70,35,0,575,580,3,72,36,0,576,580,3,98,49,0,577,580,3,100,50,0,578,
        580,3,102,51,0,579,574,1,0,0,0,579,575,1,0,0,0,579,576,1,0,0,0,579,
        577,1,0,0,0,579,578,1,0,0,0,580,65,1,0,0,0,581,582,6,33,-1,0,582,
        583,3,68,34,0,583,589,1,0,0,0,584,585,10,1,0,0,585,586,5,88,0,0,
        586,588,3,68,34,0,587,584,1,0,0,0,588,591,1,0,0,0,589,587,1,0,0,
        0,589,590,1,0,0,0,590,67,1,0,0,0,591,589,1,0,0,0,592,598,3,104,52,
        0,593,594,3,104,52,0,594,595,5,89,0,0,595,596,3,138,69,0,596,598,
        1,0,0,0,597,592,1,0,0,0,597,593,1,0,0,0,598,69,1,0,0,0,599,600,7,
        2,0,0,600,71,1,0,0,0,601,602,6,36,-1,0,602,617,7,3,0,0,603,604,5,
        1,0,0,604,605,5,59,0,0,605,606,7,4,0,0,606,617,5,60,0,0,607,617,
        3,96,48,0,608,617,3,74,37,0,609,617,3,88,44,0,610,617,3,136,68,0,
        611,612,5,7,0,0,612,613,5,59,0,0,613,614,3,56,28,0,614,615,5,60,
        0,0,615,617,1,0,0,0,616,601,1,0,0,0,616,603,1,0,0,0,616,607,1,0,
        0,0,616,608,1,0,0,0,616,609,1,0,0,0,616,610,1,0,0,0,616,611,1,0,
        0,0,617,622,1,0,0,0,618,619,10,1,0,0,619,621,3,118,59,0,620,618,
        1,0,0,0,621,624,1,0,0,0,622,620,1,0,0,0,622,623,1,0,0,0,623,73,1,
        0,0,0,624,622,1,0,0,0,625,627,3,76,38,0,626,628,5,105,0,0,627,626,
        1,0,0,0,627,628,1,0,0,0,628,629,1,0,0,0,629,630,5,63,0,0,630,631,
        3,78,39,0,631,632,5,64,0,0,632,637,1,0,0,0,633,634,3,76,38,0,634,
        635,5,105,0,0,635,637,1,0,0,0,636,625,1,0,0,0,636,633,1,0,0,0,637,
        75,1,0,0,0,638,639,7,5,0,0,639,77,1,0,0,0,640,641,6,39,-1,0,641,
        642,3,80,40,0,642,647,1,0,0,0,643,644,10,1,0,0,644,646,3,80,40,0,
        645,643,1,0,0,0,646,649,1,0,0,0,647,645,1,0,0,0,647,648,1,0,0,0,
        648,79,1,0,0,0,649,647,1,0,0,0,650,652,3,82,41,0,651,653,3,84,42,
        0,652,651,1,0,0,0,652,653,1,0,0,0,653,654,1,0,0,0,654,655,5,87,0,
        0,655,658,1,0,0,0,656,658,3,148,74,0,657,650,1,0,0,0,657,656,1,0,
        0,0,658,81,1,0,0,0,659,661,3,72,36,0,660,662,3,82,41,0,661,660,1,
        0,0,0,661,662,1,0,0,0,662,668,1,0,0,0,663,665,3,98,49,0,664,666,
        3,82,41,0,665,664,1,0,0,0,665,666,1,0,0,0,666,668,1,0,0,0,667,659,
        1,0,0,0,667,663,1,0,0,0,668,83,1,0,0,0,669,670,6,42,-1,0,670,671,
        3,86,43,0,671,677,1,0,0,0,672,673,10,1,0,0,673,674,5,88,0,0,674,
        676,3,86,43,0,675,672,1,0,0,0,676,679,1,0,0,0,677,675,1,0,0,0,677,
        678,1,0,0,0,678,85,1,0,0,0,679,677,1,0,0,0,680,687,3,104,52,0,681,
        683,3,104,52,0,682,681,1,0,0,0,682,683,1,0,0,0,683,684,1,0,0,0,684,
        685,5,86,0,0,685,687,3,56,28,0,686,680,1,0,0,0,686,682,1,0,0,0,687,
        87,1,0,0,0,688,690,5,25,0,0,689,691,5,105,0,0,690,689,1,0,0,0,690,
        691,1,0,0,0,691,692,1,0,0,0,692,693,5,63,0,0,693,694,3,90,45,0,694,
        695,5,64,0,0,695,708,1,0,0,0,696,698,5,25,0,0,697,699,5,105,0,0,
        698,697,1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,701,5,63,0,0,
        701,702,3,90,45,0,702,703,5,88,0,0,703,704,5,64,0,0,704,708,1,0,
        0,0,705,706,5,25,0,0,706,708,5,105,0,0,707,688,1,0,0,0,707,696,1,
        0,0,0,707,705,1,0,0,0,708,89,1,0,0,0,709,710,6,45,-1,0,710,711,3,
        92,46,0,711,717,1,0,0,0,712,713,10,1,0,0,713,714,5,88,0,0,714,716,
        3,92,46,0,715,712,1,0,0,0,716,719,1,0,0,0,717,715,1,0,0,0,717,718,
        1,0,0,0,718,91,1,0,0,0,719,717,1,0,0,0,720,726,3,94,47,0,721,722,
        3,94,47,0,722,723,5,89,0,0,723,724,3,56,28,0,724,726,1,0,0,0,725,
        720,1,0,0,0,725,721,1,0,0,0,726,93,1,0,0,0,727,728,5,105,0,0,728,
        95,1,0,0,0,729,730,5,51,0,0,730,731,5,59,0,0,731,732,3,130,65,0,
        732,733,5,60,0,0,733,97,1,0,0,0,734,735,7,6,0,0,735,99,1,0,0,0,736,
        743,7,7,0,0,737,743,3,110,55,0,738,739,5,10,0,0,739,740,5,59,0,0,
        740,741,5,105,0,0,741,743,5,60,0,0,742,736,1,0,0,0,742,737,1,0,0,
        0,742,738,1,0,0,0,743,101,1,0,0,0,744,745,5,49,0,0,745,746,5,59,
        0,0,746,747,3,130,65,0,747,748,5,60,0,0,748,755,1,0,0,0,749,750,
        5,49,0,0,750,751,5,59,0,0,751,752,3,56,28,0,752,753,5,60,0,0,753,
        755,1,0,0,0,754,744,1,0,0,0,754,749,1,0,0,0,755,103,1,0,0,0,756,
        758,3,118,59,0,757,756,1,0,0,0,757,758,1,0,0,0,758,759,1,0,0,0,759,
        763,3,106,53,0,760,762,3,108,54,0,761,760,1,0,0,0,762,765,1,0,0,
        0,763,761,1,0,0,0,763,764,1,0,0,0,764,105,1,0,0,0,765,763,1,0,0,
        0,766,767,6,53,-1,0,767,776,5,105,0,0,768,769,5,59,0,0,769,770,3,
        104,52,0,770,771,5,60,0,0,771,776,1,0,0,0,772,773,5,105,0,0,773,
        774,5,86,0,0,774,776,5,107,0,0,775,766,1,0,0,0,775,768,1,0,0,0,775,
        772,1,0,0,0,776,822,1,0,0,0,777,778,10,7,0,0,778,780,5,61,0,0,779,
        781,3,120,60,0,780,779,1,0,0,0,780,781,1,0,0,0,781,783,1,0,0,0,782,
        784,3,50,25,0,783,782,1,0,0,0,783,784,1,0,0,0,784,785,1,0,0,0,785,
        821,5,62,0,0,786,787,10,6,0,0,787,788,5,61,0,0,788,790,5,40,0,0,
        789,791,3,120,60,0,790,789,1,0,0,0,790,791,1,0,0,0,791,792,1,0,0,
        0,792,793,3,50,25,0,793,794,5,62,0,0,794,821,1,0,0,0,795,796,10,
        5,0,0,796,797,5,61,0,0,797,798,3,120,60,0,798,799,5,40,0,0,799,800,
        3,50,25,0,800,801,5,62,0,0,801,821,1,0,0,0,802,803,10,4,0,0,803,
        805,5,61,0,0,804,806,3,120,60,0,805,804,1,0,0,0,805,806,1,0,0,0,
        806,807,1,0,0,0,807,808,5,75,0,0,808,821,5,62,0,0,809,810,10,3,0,
        0,810,811,5,59,0,0,811,812,3,122,61,0,812,813,5,60,0,0,813,821,1,
        0,0,0,814,815,10,2,0,0,815,817,5,59,0,0,816,818,3,128,64,0,817,816,
        1,0,0,0,817,818,1,0,0,0,818,819,1,0,0,0,819,821,5,60,0,0,820,777,
        1,0,0,0,820,786,1,0,0,0,820,795,1,0,0,0,820,802,1,0,0,0,820,809,
        1,0,0,0,820,814,1,0,0,0,821,824,1,0,0,0,822,820,1,0,0,0,822,823,
        1,0,0,0,823,107,1,0,0,0,824,822,1,0,0,0,825,826,5,11,0,0,826,828,
        5,59,0,0,827,829,5,108,0,0,828,827,1,0,0,0,829,830,1,0,0,0,830,828,
        1,0,0,0,830,831,1,0,0,0,831,832,1,0,0,0,832,835,5,60,0,0,833,835,
        3,110,55,0,834,825,1,0,0,0,834,833,1,0,0,0,835,109,1,0,0,0,836,837,
        5,12,0,0,837,838,5,59,0,0,838,839,5,59,0,0,839,840,3,112,56,0,840,
        841,5,60,0,0,841,842,5,60,0,0,842,111,1,0,0,0,843,848,3,114,57,0,
        844,845,5,88,0,0,845,847,3,114,57,0,846,844,1,0,0,0,847,850,1,0,
        0,0,848,846,1,0,0,0,848,849,1,0,0,0,849,853,1,0,0,0,850,848,1,0,
        0,0,851,853,1,0,0,0,852,843,1,0,0,0,852,851,1,0,0,0,853,113,1,0,
        0,0,854,860,8,8,0,0,855,857,5,59,0,0,856,858,3,20,10,0,857,856,1,
        0,0,0,857,858,1,0,0,0,858,859,1,0,0,0,859,861,5,60,0,0,860,855,1,
        0,0,0,860,861,1,0,0,0,861,864,1,0,0,0,862,864,1,0,0,0,863,854,1,
        0,0,0,863,862,1,0,0,0,864,115,1,0,0,0,865,871,8,9,0,0,866,867,5,
        59,0,0,867,868,3,116,58,0,868,869,5,60,0,0,869,871,1,0,0,0,870,865,
        1,0,0,0,870,866,1,0,0,0,871,874,1,0,0,0,872,870,1,0,0,0,872,873,
        1,0,0,0,873,117,1,0,0,0,874,872,1,0,0,0,875,877,5,75,0,0,876,878,
        3,120,60,0,877,876,1,0,0,0,877,878,1,0,0,0,878,894,1,0,0,0,879,881,
        5,75,0,0,880,882,3,120,60,0,881,880,1,0,0,0,881,882,1,0,0,0,882,
        883,1,0,0,0,883,894,3,118,59,0,884,886,5,82,0,0,885,887,3,120,60,
        0,886,885,1,0,0,0,886,887,1,0,0,0,887,894,1,0,0,0,888,890,5,82,0,
        0,889,891,3,120,60,0,890,889,1,0,0,0,890,891,1,0,0,0,891,892,1,0,
        0,0,892,894,3,118,59,0,893,875,1,0,0,0,893,879,1,0,0,0,893,884,1,
        0,0,0,893,888,1,0,0,0,894,119,1,0,0,0,895,896,6,60,-1,0,896,897,
        3,98,49,0,897,902,1,0,0,0,898,899,10,1,0,0,899,901,3,98,49,0,900,
        898,1,0,0,0,901,904,1,0,0,0,902,900,1,0,0,0,902,903,1,0,0,0,903,
        121,1,0,0,0,904,902,1,0,0,0,905,911,3,124,62,0,906,907,3,124,62,
        0,907,908,5,88,0,0,908,909,5,104,0,0,909,911,1,0,0,0,910,905,1,0,
        0,0,910,906,1,0,0,0,911,123,1,0,0,0,912,913,6,62,-1,0,913,914,3,
        126,63,0,914,920,1,0,0,0,915,916,10,1,0,0,916,917,5,88,0,0,917,919,
        3,126,63,0,918,915,1,0,0,0,919,922,1,0,0,0,920,918,1,0,0,0,920,921,
        1,0,0,0,921,125,1,0,0,0,922,920,1,0,0,0,923,924,3,60,30,0,924,925,
        3,104,52,0,925,931,1,0,0,0,926,928,3,62,31,0,927,929,3,132,66,0,
        928,927,1,0,0,0,928,929,1,0,0,0,929,931,1,0,0,0,930,923,1,0,0,0,
        930,926,1,0,0,0,931,127,1,0,0,0,932,933,6,64,-1,0,933,934,5,105,
        0,0,934,940,1,0,0,0,935,936,10,1,0,0,936,937,5,88,0,0,937,939,5,
        105,0,0,938,935,1,0,0,0,939,942,1,0,0,0,940,938,1,0,0,0,940,941,
        1,0,0,0,941,129,1,0,0,0,942,940,1,0,0,0,943,945,3,82,41,0,944,946,
        3,132,66,0,945,944,1,0,0,0,945,946,1,0,0,0,946,131,1,0,0,0,947,959,
        3,118,59,0,948,950,3,118,59,0,949,948,1,0,0,0,949,950,1,0,0,0,950,
        951,1,0,0,0,951,955,3,134,67,0,952,954,3,108,54,0,953,952,1,0,0,
        0,954,957,1,0,0,0,955,953,1,0,0,0,955,956,1,0,0,0,956,959,1,0,0,
        0,957,955,1,0,0,0,958,947,1,0,0,0,958,949,1,0,0,0,959,133,1,0,0,
        0,960,961,6,67,-1,0,961,962,5,59,0,0,962,963,3,132,66,0,963,967,
        5,60,0,0,964,966,3,108,54,0,965,964,1,0,0,0,966,969,1,0,0,0,967,
        965,1,0,0,0,967,968,1,0,0,0,968,1007,1,0,0,0,969,967,1,0,0,0,970,
        972,5,61,0,0,971,973,3,120,60,0,972,971,1,0,0,0,972,973,1,0,0,0,
        973,975,1,0,0,0,974,976,3,50,25,0,975,974,1,0,0,0,975,976,1,0,0,
        0,976,977,1,0,0,0,977,1007,5,62,0,0,978,979,5,61,0,0,979,981,5,40,
        0,0,980,982,3,120,60,0,981,980,1,0,0,0,981,982,1,0,0,0,982,983,1,
        0,0,0,983,984,3,50,25,0,984,985,5,62,0,0,985,1007,1,0,0,0,986,987,
        5,61,0,0,987,988,3,120,60,0,988,989,5,40,0,0,989,990,3,50,25,0,990,
        991,5,62,0,0,991,1007,1,0,0,0,992,993,5,61,0,0,993,994,5,75,0,0,
        994,1007,5,62,0,0,995,997,5,59,0,0,996,998,3,122,61,0,997,996,1,
        0,0,0,997,998,1,0,0,0,998,999,1,0,0,0,999,1003,5,60,0,0,1000,1002,
        3,108,54,0,1001,1000,1,0,0,0,1002,1005,1,0,0,0,1003,1001,1,0,0,0,
        1003,1004,1,0,0,0,1004,1007,1,0,0,0,1005,1003,1,0,0,0,1006,960,1,
        0,0,0,1006,970,1,0,0,0,1006,978,1,0,0,0,1006,986,1,0,0,0,1006,992,
        1,0,0,0,1006,995,1,0,0,0,1007,1051,1,0,0,0,1008,1009,10,5,0,0,1009,
        1011,5,61,0,0,1010,1012,3,120,60,0,1011,1010,1,0,0,0,1011,1012,1,
        0,0,0,1012,1014,1,0,0,0,1013,1015,3,50,25,0,1014,1013,1,0,0,0,1014,
        1015,1,0,0,0,1015,1016,1,0,0,0,1016,1050,5,62,0,0,1017,1018,10,4,
        0,0,1018,1019,5,61,0,0,1019,1021,5,40,0,0,1020,1022,3,120,60,0,1021,
        1020,1,0,0,0,1021,1022,1,0,0,0,1022,1023,1,0,0,0,1023,1024,3,50,
        25,0,1024,1025,5,62,0,0,1025,1050,1,0,0,0,1026,1027,10,3,0,0,1027,
        1028,5,61,0,0,1028,1029,3,120,60,0,1029,1030,5,40,0,0,1030,1031,
        3,50,25,0,1031,1032,5,62,0,0,1032,1050,1,0,0,0,1033,1034,10,2,0,
        0,1034,1035,5,61,0,0,1035,1036,5,75,0,0,1036,1050,5,62,0,0,1037,
        1038,10,1,0,0,1038,1040,5,59,0,0,1039,1041,3,122,61,0,1040,1039,
        1,0,0,0,1040,1041,1,0,0,0,1041,1042,1,0,0,0,1042,1046,5,60,0,0,1043,
        1045,3,108,54,0,1044,1043,1,0,0,0,1045,1048,1,0,0,0,1046,1044,1,
        0,0,0,1046,1047,1,0,0,0,1047,1050,1,0,0,0,1048,1046,1,0,0,0,1049,
        1008,1,0,0,0,1049,1017,1,0,0,0,1049,1026,1,0,0,0,1049,1033,1,0,0,
        0,1049,1037,1,0,0,0,1050,1053,1,0,0,0,1051,1049,1,0,0,0,1051,1052,
        1,0,0,0,1052,135,1,0,0,0,1053,1051,1,0,0,0,1054,1055,5,105,0,0,1055,
        137,1,0,0,0,1056,1067,3,50,25,0,1057,1058,5,63,0,0,1058,1059,3,140,
        70,0,1059,1060,5,64,0,0,1060,1067,1,0,0,0,1061,1062,5,63,0,0,1062,
        1063,3,140,70,0,1063,1064,5,88,0,0,1064,1065,5,64,0,0,1065,1067,
        1,0,0,0,1066,1056,1,0,0,0,1066,1057,1,0,0,0,1066,1061,1,0,0,0,1067,
        139,1,0,0,0,1068,1070,6,70,-1,0,1069,1071,3,142,71,0,1070,1069,1,
        0,0,0,1070,1071,1,0,0,0,1071,1072,1,0,0,0,1072,1073,3,138,69,0,1073,
        1082,1,0,0,0,1074,1075,10,1,0,0,1075,1077,5,88,0,0,1076,1078,3,142,
        71,0,1077,1076,1,0,0,0,1077,1078,1,0,0,0,1078,1079,1,0,0,0,1079,
        1081,3,138,69,0,1080,1074,1,0,0,0,1081,1084,1,0,0,0,1082,1080,1,
        0,0,0,1082,1083,1,0,0,0,1083,141,1,0,0,0,1084,1082,1,0,0,0,1085,
        1086,3,144,72,0,1086,1087,5,89,0,0,1087,143,1,0,0,0,1088,1089,6,
        72,-1,0,1089,1090,3,146,73,0,1090,1095,1,0,0,0,1091,1092,10,1,0,
        0,1092,1094,3,146,73,0,1093,1091,1,0,0,0,1094,1097,1,0,0,0,1095,
        1093,1,0,0,0,1095,1096,1,0,0,0,1096,145,1,0,0,0,1097,1095,1,0,0,
        0,1098,1099,5,61,0,0,1099,1100,3,56,28,0,1100,1101,5,62,0,0,1101,
        1105,1,0,0,0,1102,1103,5,103,0,0,1103,1105,5,105,0,0,1104,1098,1,
        0,0,0,1104,1102,1,0,0,0,1105,147,1,0,0,0,1106,1107,5,57,0,0,1107,
        1108,5,59,0,0,1108,1109,3,56,28,0,1109,1111,5,88,0,0,1110,1112,5,
        108,0,0,1111,1110,1,0,0,0,1112,1113,1,0,0,0,1113,1111,1,0,0,0,1113,
        1114,1,0,0,0,1114,1115,1,0,0,0,1115,1116,5,60,0,0,1116,1117,5,87,
        0,0,1117,149,1,0,0,0,1118,1156,3,152,76,0,1119,1156,3,154,77,0,1120,
        1156,3,160,80,0,1121,1156,3,162,81,0,1122,1156,3,164,82,0,1123,1156,
        3,172,86,0,1124,1125,7,10,0,0,1125,1126,7,11,0,0,1126,1135,5,59,
        0,0,1127,1132,3,46,23,0,1128,1129,5,88,0,0,1129,1131,3,46,23,0,1130,
        1128,1,0,0,0,1131,1134,1,0,0,0,1132,1130,1,0,0,0,1132,1133,1,0,0,
        0,1133,1136,1,0,0,0,1134,1132,1,0,0,0,1135,1127,1,0,0,0,1135,1136,
        1,0,0,0,1136,1150,1,0,0,0,1137,1146,5,86,0,0,1138,1143,3,46,23,0,
        1139,1140,5,88,0,0,1140,1142,3,46,23,0,1141,1139,1,0,0,0,1142,1145,
        1,0,0,0,1143,1141,1,0,0,0,1143,1144,1,0,0,0,1144,1147,1,0,0,0,1145,
        1143,1,0,0,0,1146,1138,1,0,0,0,1146,1147,1,0,0,0,1147,1149,1,0,0,
        0,1148,1137,1,0,0,0,1149,1152,1,0,0,0,1150,1148,1,0,0,0,1150,1151,
        1,0,0,0,1151,1153,1,0,0,0,1152,1150,1,0,0,0,1153,1154,5,60,0,0,1154,
        1156,5,87,0,0,1155,1118,1,0,0,0,1155,1119,1,0,0,0,1155,1120,1,0,
        0,0,1155,1121,1,0,0,0,1155,1122,1,0,0,0,1155,1123,1,0,0,0,1155,1124,
        1,0,0,0,1156,151,1,0,0,0,1157,1158,5,105,0,0,1158,1159,5,86,0,0,
        1159,1169,3,150,75,0,1160,1161,5,17,0,0,1161,1162,3,56,28,0,1162,
        1163,5,86,0,0,1163,1164,3,150,75,0,1164,1169,1,0,0,0,1165,1166,5,
        21,0,0,1166,1167,5,86,0,0,1167,1169,3,150,75,0,1168,1157,1,0,0,0,
        1168,1160,1,0,0,0,1168,1165,1,0,0,0,1169,153,1,0,0,0,1170,1172,5,
        63,0,0,1171,1173,3,156,78,0,1172,1171,1,0,0,0,1172,1173,1,0,0,0,
        1173,1174,1,0,0,0,1174,1175,5,64,0,0,1175,155,1,0,0,0,1176,1177,
        6,78,-1,0,1177,1178,3,158,79,0,1178,1183,1,0,0,0,1179,1180,10,1,
        0,0,1180,1182,3,158,79,0,1181,1179,1,0,0,0,1182,1185,1,0,0,0,1183,
        1181,1,0,0,0,1183,1184,1,0,0,0,1184,157,1,0,0,0,1185,1183,1,0,0,
        0,1186,1189,3,150,75,0,1187,1189,3,58,29,0,1188,1186,1,0,0,0,1188,
        1187,1,0,0,0,1189,159,1,0,0,0,1190,1192,3,54,27,0,1191,1190,1,0,
        0,0,1191,1192,1,0,0,0,1192,1193,1,0,0,0,1193,1194,5,87,0,0,1194,
        161,1,0,0,0,1195,1196,5,30,0,0,1196,1197,5,59,0,0,1197,1198,3,54,
        27,0,1198,1199,5,60,0,0,1199,1202,3,150,75,0,1200,1201,5,24,0,0,
        1201,1203,3,150,75,0,1202,1200,1,0,0,0,1202,1203,1,0,0,0,1203,1211,
        1,0,0,0,1204,1205,5,42,0,0,1205,1206,5,59,0,0,1206,1207,3,54,27,
        0,1207,1208,5,60,0,0,1208,1209,3,150,75,0,1209,1211,1,0,0,0,1210,
        1195,1,0,0,0,1210,1204,1,0,0,0,1211,163,1,0,0,0,1212,1213,5,48,0,
        0,1213,1214,5,59,0,0,1214,1215,3,54,27,0,1215,1216,5,60,0,0,1216,
        1217,3,150,75,0,1217,1233,1,0,0,0,1218,1219,5,22,0,0,1219,1220,3,
        150,75,0,1220,1221,5,48,0,0,1221,1222,5,59,0,0,1222,1223,3,54,27,
        0,1223,1224,5,60,0,0,1224,1225,5,87,0,0,1225,1233,1,0,0,0,1226,1227,
        5,28,0,0,1227,1228,5,59,0,0,1228,1229,3,166,83,0,1229,1230,5,60,
        0,0,1230,1231,3,150,75,0,1231,1233,1,0,0,0,1232,1212,1,0,0,0,1232,
        1218,1,0,0,0,1232,1226,1,0,0,0,1233,165,1,0,0,0,1234,1235,3,168,
        84,0,1235,1237,5,87,0,0,1236,1238,3,170,85,0,1237,1236,1,0,0,0,1237,
        1238,1,0,0,0,1238,1239,1,0,0,0,1239,1241,5,87,0,0,1240,1242,3,170,
        85,0,1241,1240,1,0,0,0,1241,1242,1,0,0,0,1242,1255,1,0,0,0,1243,
        1245,3,54,27,0,1244,1243,1,0,0,0,1244,1245,1,0,0,0,1245,1246,1,0,
        0,0,1246,1248,5,87,0,0,1247,1249,3,170,85,0,1248,1247,1,0,0,0,1248,
        1249,1,0,0,0,1249,1250,1,0,0,0,1250,1252,5,87,0,0,1251,1253,3,170,
        85,0,1252,1251,1,0,0,0,1252,1253,1,0,0,0,1253,1255,1,0,0,0,1254,
        1234,1,0,0,0,1254,1244,1,0,0,0,1255,167,1,0,0,0,1256,1257,3,60,30,
        0,1257,1258,3,66,33,0,1258,1261,1,0,0,0,1259,1261,3,60,30,0,1260,
        1256,1,0,0,0,1260,1259,1,0,0,0,1261,169,1,0,0,0,1262,1263,6,85,-1,
        0,1263,1264,3,50,25,0,1264,1270,1,0,0,0,1265,1266,10,1,0,0,1266,
        1267,5,88,0,0,1267,1269,3,50,25,0,1268,1265,1,0,0,0,1269,1272,1,
        0,0,0,1270,1268,1,0,0,0,1270,1271,1,0,0,0,1271,171,1,0,0,0,1272,
        1270,1,0,0,0,1273,1274,5,29,0,0,1274,1275,5,105,0,0,1275,1290,5,
        87,0,0,1276,1277,5,20,0,0,1277,1290,5,87,0,0,1278,1279,5,16,0,0,
        1279,1290,5,87,0,0,1280,1282,5,36,0,0,1281,1283,3,54,27,0,1282,1281,
        1,0,0,0,1282,1283,1,0,0,0,1283,1284,1,0,0,0,1284,1290,5,87,0,0,1285,
        1286,5,29,0,0,1286,1287,3,22,11,0,1287,1288,5,87,0,0,1288,1290,1,
        0,0,0,1289,1273,1,0,0,0,1289,1276,1,0,0,0,1289,1278,1,0,0,0,1289,
        1280,1,0,0,0,1289,1285,1,0,0,0,1290,173,1,0,0,0,141,175,186,192,
        195,199,210,218,226,246,263,273,309,319,332,334,345,370,387,401,
        403,415,417,429,431,449,451,463,465,476,487,498,509,520,529,537,
        549,562,567,572,579,589,597,616,622,627,636,647,652,657,661,665,
        667,677,682,686,690,698,707,717,725,742,754,757,763,775,780,783,
        790,805,817,820,822,830,834,848,852,857,860,863,870,872,877,881,
        886,890,893,902,910,920,928,930,940,945,949,955,958,967,972,975,
        981,997,1003,1006,1011,1014,1021,1040,1046,1049,1051,1066,1070,1077,
        1082,1095,1104,1113,1132,1135,1143,1146,1150,1155,1168,1172,1183,
        1188,1191,1202,1210,1232,1237,1241,1244,1248,1252,1254,1260,1270,
        1282,1289
    ]

class TinyCParser ( Parser ):

    grammarFileName = "TinyC.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'__extension__'", "'__builtin_va_arg'", 
                     "'__builtin_offsetof'", "'__m128'", "'__m128d'", "'__m128i'", 
                     "'__typeof__'", "'__inline__'", "'__stdcall'", "'__declspec'", 
                     "'__asm'", "'__attribute__'", "'__asm__'", "'__volatile__'", 
                     "'auto'", "'break'", "'case'", "'char'", "'const'", 
                     "'continue'", "'default'", "'do'", "'double'", "'else'", 
                     "'enum'", "'extern'", "'float'", "'for'", "'goto'", 
                     "'if'", "'inline'", "'int'", "'long'", "'register'", 
                     "'restrict'", "'return'", "'short'", "'signed'", "'sizeof'", 
                     "'static'", "'struct'", "'switch'", "'typedef'", "'union'", 
                     "'unsigned'", "'void'", "'volatile'", "'while'", "'_Alignas'", 
                     "'_Alignof'", "'_Atomic'", "'_Bool'", "'_Complex'", 
                     "'_Generic'", "'_Imaginary'", "'_Noreturn'", "'_Static_assert'", 
                     "'_Thread_local'", "'('", "')'", "'['", "']'", "'{'", 
                     "'}'", "'<'", "'<='", "'>'", "'>='", "'<<'", "'>>'", 
                     "'+'", "'++'", "'-'", "'--'", "'*'", "'/'", "'%'", 
                     "'&'", "'|'", "'&&'", "'||'", "'^'", "'!'", "'~'", 
                     "'?'", "':'", "';'", "','", "'='", "'*='", "'/='", 
                     "'%='", "'+='", "'-='", "'<<='", "'>>='", "'&='", "'^='", 
                     "'|='", "'=='", "'!='", "'->'", "'.'", "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "Auto", "Break", 
                      "Case", "Char", "Const", "Continue", "Default", "Do", 
                      "Double", "Else", "Enum", "Extern", "Float", "For", 
                      "Goto", "If", "Inline", "Int", "Long", "Register", 
                      "Restrict", "Return", "Short", "Signed", "Sizeof", 
                      "Static", "Struct", "Switch", "Typedef", "Union", 
                      "Unsigned", "Void", "Volatile", "While", "Alignas", 
                      "Alignof", "Atomic", "Bool", "Complex", "Generic", 
                      "Imaginary", "Noreturn", "StaticAssert", "ThreadLocal", 
                      "LeftParen", "RightParen", "LeftBracket", "RightBracket", 
                      "LeftBrace", "RightBrace", "Less", "LessEqual", "Greater", 
                      "GreaterEqual", "LeftShift", "RightShift", "Plus", 
                      "PlusPlus", "Minus", "MinusMinus", "Star", "Div", 
                      "Mod", "And", "Or", "AndAnd", "OrOr", "Caret", "Not", 
                      "Tilde", "Question", "Colon", "Semi", "Comma", "Assign", 
                      "StarAssign", "DivAssign", "ModAssign", "PlusAssign", 
                      "MinusAssign", "LeftShiftAssign", "RightShiftAssign", 
                      "AndAssign", "XorAssign", "OrAssign", "Equal", "NotEqual", 
                      "Arrow", "Dot", "Ellipsis", "Identifier", "Constant", 
                      "DigitSequence", "StringLiteral", "ComplexDefine", 
                      "Include", "AsmBlock", "LineAfterPreprocessing", "LineDirective", 
                      "PragmaDirective", "Whitespace", "Newline", "BlockComment", 
                      "LineComment" ]

    RULE_compilationUnit = 0
    RULE_translationUnit = 1
    RULE_externalDeclaration = 2
    RULE_functionDefinition = 3
    RULE_declarationList = 4
    RULE_primaryExpression = 5
    RULE_genericSelection = 6
    RULE_genericAssocList = 7
    RULE_genericAssociation = 8
    RULE_postfixExpression = 9
    RULE_argumentExpressionList = 10
    RULE_unaryExpression = 11
    RULE_unaryOperator = 12
    RULE_castExpression = 13
    RULE_multiplicativeExpression = 14
    RULE_additiveExpression = 15
    RULE_shiftExpression = 16
    RULE_relationalExpression = 17
    RULE_equalityExpression = 18
    RULE_andExpression = 19
    RULE_exclusiveOrExpression = 20
    RULE_inclusiveOrExpression = 21
    RULE_logicalAndExpression = 22
    RULE_logicalOrExpression = 23
    RULE_conditionalExpression = 24
    RULE_assignmentExpression = 25
    RULE_assignmentOperator = 26
    RULE_expression = 27
    RULE_constantExpression = 28
    RULE_declaration = 29
    RULE_declarationSpecifiers = 30
    RULE_declarationSpecifiers2 = 31
    RULE_declarationSpecifier = 32
    RULE_initDeclaratorList = 33
    RULE_initDeclarator = 34
    RULE_storageClassSpecifier = 35
    RULE_typeSpecifier = 36
    RULE_structOrUnionSpecifier = 37
    RULE_structOrUnion = 38
    RULE_structDeclarationList = 39
    RULE_structDeclaration = 40
    RULE_specifierQualifierList = 41
    RULE_structDeclaratorList = 42
    RULE_structDeclarator = 43
    RULE_enumSpecifier = 44
    RULE_enumeratorList = 45
    RULE_enumerator = 46
    RULE_enumerationConstant = 47
    RULE_atomicTypeSpecifier = 48
    RULE_typeQualifier = 49
    RULE_functionSpecifier = 50
    RULE_alignmentSpecifier = 51
    RULE_declarator = 52
    RULE_directDeclarator = 53
    RULE_gccDeclaratorExtension = 54
    RULE_gccAttributeSpecifier = 55
    RULE_gccAttributeList = 56
    RULE_gccAttribute = 57
    RULE_nestedParenthesesBlock = 58
    RULE_pointer = 59
    RULE_typeQualifierList = 60
    RULE_parameterTypeList = 61
    RULE_parameterList = 62
    RULE_parameterDeclaration = 63
    RULE_identifierList = 64
    RULE_typeName = 65
    RULE_abstractDeclarator = 66
    RULE_directAbstractDeclarator = 67
    RULE_typedefName = 68
    RULE_initializer = 69
    RULE_initializerList = 70
    RULE_designation = 71
    RULE_designatorList = 72
    RULE_designator = 73
    RULE_staticAssertDeclaration = 74
    RULE_statement = 75
    RULE_labeledStatement = 76
    RULE_compoundStatement = 77
    RULE_blockItemList = 78
    RULE_blockItem = 79
    RULE_expressionStatement = 80
    RULE_selectionStatement = 81
    RULE_iterationStatement = 82
    RULE_forCondition = 83
    RULE_forDeclaration = 84
    RULE_forExpression = 85
    RULE_jumpStatement = 86

    ruleNames =  [ "compilationUnit", "translationUnit", "externalDeclaration", 
                   "functionDefinition", "declarationList", "primaryExpression", 
                   "genericSelection", "genericAssocList", "genericAssociation", 
                   "postfixExpression", "argumentExpressionList", "unaryExpression", 
                   "unaryOperator", "castExpression", "multiplicativeExpression", 
                   "additiveExpression", "shiftExpression", "relationalExpression", 
                   "equalityExpression", "andExpression", "exclusiveOrExpression", 
                   "inclusiveOrExpression", "logicalAndExpression", "logicalOrExpression", 
                   "conditionalExpression", "assignmentExpression", "assignmentOperator", 
                   "expression", "constantExpression", "declaration", "declarationSpecifiers", 
                   "declarationSpecifiers2", "declarationSpecifier", "initDeclaratorList", 
                   "initDeclarator", "storageClassSpecifier", "typeSpecifier", 
                   "structOrUnionSpecifier", "structOrUnion", "structDeclarationList", 
                   "structDeclaration", "specifierQualifierList", "structDeclaratorList", 
                   "structDeclarator", "enumSpecifier", "enumeratorList", 
                   "enumerator", "enumerationConstant", "atomicTypeSpecifier", 
                   "typeQualifier", "functionSpecifier", "alignmentSpecifier", 
                   "declarator", "directDeclarator", "gccDeclaratorExtension", 
                   "gccAttributeSpecifier", "gccAttributeList", "gccAttribute", 
                   "nestedParenthesesBlock", "pointer", "typeQualifierList", 
                   "parameterTypeList", "parameterList", "parameterDeclaration", 
                   "identifierList", "typeName", "abstractDeclarator", "directAbstractDeclarator", 
                   "typedefName", "initializer", "initializerList", "designation", 
                   "designatorList", "designator", "staticAssertDeclaration", 
                   "statement", "labeledStatement", "compoundStatement", 
                   "blockItemList", "blockItem", "expressionStatement", 
                   "selectionStatement", "iterationStatement", "forCondition", 
                   "forDeclaration", "forExpression", "jumpStatement" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    Auto=15
    Break=16
    Case=17
    Char=18
    Const=19
    Continue=20
    Default=21
    Do=22
    Double=23
    Else=24
    Enum=25
    Extern=26
    Float=27
    For=28
    Goto=29
    If=30
    Inline=31
    Int=32
    Long=33
    Register=34
    Restrict=35
    Return=36
    Short=37
    Signed=38
    Sizeof=39
    Static=40
    Struct=41
    Switch=42
    Typedef=43
    Union=44
    Unsigned=45
    Void=46
    Volatile=47
    While=48
    Alignas=49
    Alignof=50
    Atomic=51
    Bool=52
    Complex=53
    Generic=54
    Imaginary=55
    Noreturn=56
    StaticAssert=57
    ThreadLocal=58
    LeftParen=59
    RightParen=60
    LeftBracket=61
    RightBracket=62
    LeftBrace=63
    RightBrace=64
    Less=65
    LessEqual=66
    Greater=67
    GreaterEqual=68
    LeftShift=69
    RightShift=70
    Plus=71
    PlusPlus=72
    Minus=73
    MinusMinus=74
    Star=75
    Div=76
    Mod=77
    And=78
    Or=79
    AndAnd=80
    OrOr=81
    Caret=82
    Not=83
    Tilde=84
    Question=85
    Colon=86
    Semi=87
    Comma=88
    Assign=89
    StarAssign=90
    DivAssign=91
    ModAssign=92
    PlusAssign=93
    MinusAssign=94
    LeftShiftAssign=95
    RightShiftAssign=96
    AndAssign=97
    XorAssign=98
    OrAssign=99
    Equal=100
    NotEqual=101
    Arrow=102
    Dot=103
    Ellipsis=104
    Identifier=105
    Constant=106
    DigitSequence=107
    StringLiteral=108
    ComplexDefine=109
    Include=110
    AsmBlock=111
    LineAfterPreprocessing=112
    LineDirective=113
    PragmaDirective=114
    Whitespace=115
    Newline=116
    BlockComment=117
    LineComment=118

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class CompilationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(TinyCParser.EOF, 0)

        def translationUnit(self):
            return self.getTypedRuleContext(TinyCParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_compilationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompilationUnit" ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompilationUnit" ):
                listener.exitCompilationUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompilationUnit" ):
                return visitor.visitCompilationUnit(self)
            else:
                return visitor.visitChildren(self)




    def compilationUnit(self):

        localctx = TinyCParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 1097465915769657330) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & 1073746049) != 0):
                self.state = 174
                self.translationUnit(0)


            self.state = 177
            self.match(TinyCParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TranslationUnitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def externalDeclaration(self):
            return self.getTypedRuleContext(TinyCParser.ExternalDeclarationContext,0)


        def translationUnit(self):
            return self.getTypedRuleContext(TinyCParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_translationUnit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationUnit" ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationUnit" ):
                listener.exitTranslationUnit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTranslationUnit" ):
                return visitor.visitTranslationUnit(self)
            else:
                return visitor.visitChildren(self)



    def translationUnit(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.TranslationUnitContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 2
        self.enterRecursionRule(localctx, 2, self.RULE_translationUnit, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 180
            self.externalDeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 186
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.TranslationUnitContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_translationUnit)
                    self.state = 182
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 183
                    self.externalDeclaration() 
                self.state = 188
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExternalDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDefinition(self):
            return self.getTypedRuleContext(TinyCParser.FunctionDefinitionContext,0)


        def declaration(self):
            return self.getTypedRuleContext(TinyCParser.DeclarationContext,0)


        def Semi(self):
            return self.getToken(TinyCParser.Semi, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_externalDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExternalDeclaration" ):
                listener.enterExternalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExternalDeclaration" ):
                listener.exitExternalDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExternalDeclaration" ):
                return visitor.visitExternalDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def externalDeclaration(self):

        localctx = TinyCParser.ExternalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_externalDeclaration)
        try:
            self.state = 192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 189
                self.functionDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 190
                self.declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 191
                self.match(TinyCParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(TinyCParser.DeclaratorContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(TinyCParser.CompoundStatementContext,0)


        def declarationSpecifiers(self):
            return self.getTypedRuleContext(TinyCParser.DeclarationSpecifiersContext,0)


        def declarationList(self):
            return self.getTypedRuleContext(TinyCParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefinition" ):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinition(self):

        localctx = TinyCParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 194
                self.declarationSpecifiers()


            self.state = 197
            self.declarator()
            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 521005163466233842) != 0) or _la==105:
                self.state = 198
                self.declarationList(0)


            self.state = 201
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(TinyCParser.DeclarationContext,0)


        def declarationList(self):
            return self.getTypedRuleContext(TinyCParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_declarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationList" ):
                listener.enterDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationList" ):
                listener.exitDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationList" ):
                return visitor.visitDeclarationList(self)
            else:
                return visitor.visitChildren(self)



    def declarationList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.DeclarationListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 8
        self.enterRecursionRule(localctx, 8, self.RULE_declarationList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.declaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 210
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.DeclarationListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_declarationList)
                    self.state = 206
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 207
                    self.declaration() 
                self.state = 212
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PrimaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(TinyCParser.Identifier, 0)

        def Constant(self):
            return self.getToken(TinyCParser.Constant, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(TinyCParser.StringLiteral)
            else:
                return self.getToken(TinyCParser.StringLiteral, i)

        def LeftParen(self):
            return self.getToken(TinyCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(TinyCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(TinyCParser.RightParen, 0)

        def genericSelection(self):
            return self.getTypedRuleContext(TinyCParser.GenericSelectionContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(TinyCParser.CompoundStatementContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(TinyCParser.UnaryExpressionContext,0)


        def Comma(self):
            return self.getToken(TinyCParser.Comma, 0)

        def typeName(self):
            return self.getTypedRuleContext(TinyCParser.TypeNameContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_primaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryExpression" ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryExpression" ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryExpression" ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = TinyCParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 246
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 213
                self.match(TinyCParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 214
                self.match(TinyCParser.Constant)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 216 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 215
                        self.match(TinyCParser.StringLiteral)

                    else:
                        raise NoViableAltException(self)
                    self.state = 218 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 220
                self.match(TinyCParser.LeftParen)
                self.state = 221
                self.expression(0)
                self.state = 222
                self.match(TinyCParser.RightParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 224
                self.genericSelection()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 225
                    self.match(TinyCParser.T__0)


                self.state = 228
                self.match(TinyCParser.LeftParen)
                self.state = 229
                self.compoundStatement()
                self.state = 230
                self.match(TinyCParser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 232
                self.match(TinyCParser.T__1)
                self.state = 233
                self.match(TinyCParser.LeftParen)
                self.state = 234
                self.unaryExpression()
                self.state = 235
                self.match(TinyCParser.Comma)
                self.state = 236
                self.typeName()
                self.state = 237
                self.match(TinyCParser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 239
                self.match(TinyCParser.T__2)
                self.state = 240
                self.match(TinyCParser.LeftParen)
                self.state = 241
                self.typeName()
                self.state = 242
                self.match(TinyCParser.Comma)
                self.state = 243
                self.unaryExpression()
                self.state = 244
                self.match(TinyCParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericSelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Generic(self):
            return self.getToken(TinyCParser.Generic, 0)

        def LeftParen(self):
            return self.getToken(TinyCParser.LeftParen, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(TinyCParser.AssignmentExpressionContext,0)


        def Comma(self):
            return self.getToken(TinyCParser.Comma, 0)

        def genericAssocList(self):
            return self.getTypedRuleContext(TinyCParser.GenericAssocListContext,0)


        def RightParen(self):
            return self.getToken(TinyCParser.RightParen, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_genericSelection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericSelection" ):
                listener.enterGenericSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericSelection" ):
                listener.exitGenericSelection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericSelection" ):
                return visitor.visitGenericSelection(self)
            else:
                return visitor.visitChildren(self)




    def genericSelection(self):

        localctx = TinyCParser.GenericSelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_genericSelection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.match(TinyCParser.Generic)
            self.state = 249
            self.match(TinyCParser.LeftParen)
            self.state = 250
            self.assignmentExpression()
            self.state = 251
            self.match(TinyCParser.Comma)
            self.state = 252
            self.genericAssocList(0)
            self.state = 253
            self.match(TinyCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericAssocListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericAssociation(self):
            return self.getTypedRuleContext(TinyCParser.GenericAssociationContext,0)


        def genericAssocList(self):
            return self.getTypedRuleContext(TinyCParser.GenericAssocListContext,0)


        def Comma(self):
            return self.getToken(TinyCParser.Comma, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_genericAssocList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssocList" ):
                listener.enterGenericAssocList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssocList" ):
                listener.exitGenericAssocList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericAssocList" ):
                return visitor.visitGenericAssocList(self)
            else:
                return visitor.visitChildren(self)



    def genericAssocList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.GenericAssocListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 14
        self.enterRecursionRule(localctx, 14, self.RULE_genericAssocList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self.genericAssociation()
            self._ctx.stop = self._input.LT(-1)
            self.state = 263
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.GenericAssocListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_genericAssocList)
                    self.state = 258
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 259
                    self.match(TinyCParser.Comma)
                    self.state = 260
                    self.genericAssociation() 
                self.state = 265
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class GenericAssociationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(TinyCParser.TypeNameContext,0)


        def Colon(self):
            return self.getToken(TinyCParser.Colon, 0)

        def assignmentExpression(self):
            return self.getTypedRuleContext(TinyCParser.AssignmentExpressionContext,0)


        def Default(self):
            return self.getToken(TinyCParser.Default, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_genericAssociation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericAssociation" ):
                listener.enterGenericAssociation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericAssociation" ):
                listener.exitGenericAssociation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericAssociation" ):
                return visitor.visitGenericAssociation(self)
            else:
                return visitor.visitChildren(self)




    def genericAssociation(self):

        localctx = TinyCParser.GenericAssociationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_genericAssociation)
        try:
            self.state = 273
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 4, 5, 6, 7, 18, 19, 23, 25, 27, 32, 33, 35, 37, 38, 41, 44, 45, 46, 47, 51, 52, 53, 105]:
                self.enterOuterAlt(localctx, 1)
                self.state = 266
                self.typeName()
                self.state = 267
                self.match(TinyCParser.Colon)
                self.state = 268
                self.assignmentExpression()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 2)
                self.state = 270
                self.match(TinyCParser.Default)
                self.state = 271
                self.match(TinyCParser.Colon)
                self.state = 272
                self.assignmentExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(TinyCParser.PrimaryExpressionContext,0)


        def LeftParen(self):
            return self.getToken(TinyCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(TinyCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(TinyCParser.RightParen, 0)

        def LeftBrace(self):
            return self.getToken(TinyCParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(TinyCParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(TinyCParser.RightBrace, 0)

        def Comma(self):
            return self.getToken(TinyCParser.Comma, 0)

        def postfixExpression(self):
            return self.getTypedRuleContext(TinyCParser.PostfixExpressionContext,0)


        def LeftBracket(self):
            return self.getToken(TinyCParser.LeftBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(TinyCParser.ExpressionContext,0)


        def RightBracket(self):
            return self.getToken(TinyCParser.RightBracket, 0)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(TinyCParser.ArgumentExpressionListContext,0)


        def Dot(self):
            return self.getToken(TinyCParser.Dot, 0)

        def Identifier(self):
            return self.getToken(TinyCParser.Identifier, 0)

        def Arrow(self):
            return self.getToken(TinyCParser.Arrow, 0)

        def PlusPlus(self):
            return self.getToken(TinyCParser.PlusPlus, 0)

        def MinusMinus(self):
            return self.getToken(TinyCParser.MinusMinus, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_postfixExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixExpression" ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixExpression" ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixExpression" ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)



    def postfixExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.PostfixExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 18
        self.enterRecursionRule(localctx, 18, self.RULE_postfixExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.state = 276
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 277
                self.match(TinyCParser.LeftParen)
                self.state = 278
                self.typeName()
                self.state = 279
                self.match(TinyCParser.RightParen)
                self.state = 280
                self.match(TinyCParser.LeftBrace)
                self.state = 281
                self.initializerList(0)
                self.state = 282
                self.match(TinyCParser.RightBrace)
                pass

            elif la_ == 3:
                self.state = 284
                self.match(TinyCParser.LeftParen)
                self.state = 285
                self.typeName()
                self.state = 286
                self.match(TinyCParser.RightParen)
                self.state = 287
                self.match(TinyCParser.LeftBrace)
                self.state = 288
                self.initializerList(0)
                self.state = 289
                self.match(TinyCParser.Comma)
                self.state = 290
                self.match(TinyCParser.RightBrace)
                pass

            elif la_ == 4:
                self.state = 292
                self.match(TinyCParser.T__0)
                self.state = 293
                self.match(TinyCParser.LeftParen)
                self.state = 294
                self.typeName()
                self.state = 295
                self.match(TinyCParser.RightParen)
                self.state = 296
                self.match(TinyCParser.LeftBrace)
                self.state = 297
                self.initializerList(0)
                self.state = 298
                self.match(TinyCParser.RightBrace)
                pass

            elif la_ == 5:
                self.state = 300
                self.match(TinyCParser.T__0)
                self.state = 301
                self.match(TinyCParser.LeftParen)
                self.state = 302
                self.typeName()
                self.state = 303
                self.match(TinyCParser.RightParen)
                self.state = 304
                self.match(TinyCParser.LeftBrace)
                self.state = 305
                self.initializerList(0)
                self.state = 306
                self.match(TinyCParser.Comma)
                self.state = 307
                self.match(TinyCParser.RightBrace)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 334
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 332
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        localctx = TinyCParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 311
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 312
                        self.match(TinyCParser.LeftBracket)
                        self.state = 313
                        self.expression(0)
                        self.state = 314
                        self.match(TinyCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = TinyCParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 316
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 317
                        self.match(TinyCParser.LeftParen)
                        self.state = 319
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 595601600475561998) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 257698050719) != 0):
                            self.state = 318
                            self.argumentExpressionList(0)


                        self.state = 321
                        self.match(TinyCParser.RightParen)
                        pass

                    elif la_ == 3:
                        localctx = TinyCParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 322
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 323
                        self.match(TinyCParser.Dot)
                        self.state = 324
                        self.match(TinyCParser.Identifier)
                        pass

                    elif la_ == 4:
                        localctx = TinyCParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 325
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 326
                        self.match(TinyCParser.Arrow)
                        self.state = 327
                        self.match(TinyCParser.Identifier)
                        pass

                    elif la_ == 5:
                        localctx = TinyCParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 328
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 329
                        self.match(TinyCParser.PlusPlus)
                        pass

                    elif la_ == 6:
                        localctx = TinyCParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 330
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 331
                        self.match(TinyCParser.MinusMinus)
                        pass

             
                self.state = 336
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ArgumentExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(TinyCParser.AssignmentExpressionContext,0)


        def argumentExpressionList(self):
            return self.getTypedRuleContext(TinyCParser.ArgumentExpressionListContext,0)


        def Comma(self):
            return self.getToken(TinyCParser.Comma, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_argumentExpressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentExpressionList" ):
                listener.enterArgumentExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentExpressionList" ):
                listener.exitArgumentExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgumentExpressionList" ):
                return visitor.visitArgumentExpressionList(self)
            else:
                return visitor.visitChildren(self)



    def argumentExpressionList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.ArgumentExpressionListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 20
        self.enterRecursionRule(localctx, 20, self.RULE_argumentExpressionList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.assignmentExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 345
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.ArgumentExpressionListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_argumentExpressionList)
                    self.state = 340
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 341
                    self.match(TinyCParser.Comma)
                    self.state = 342
                    self.assignmentExpression() 
                self.state = 347
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(TinyCParser.PostfixExpressionContext,0)


        def PlusPlus(self):
            return self.getToken(TinyCParser.PlusPlus, 0)

        def unaryExpression(self):
            return self.getTypedRuleContext(TinyCParser.UnaryExpressionContext,0)


        def MinusMinus(self):
            return self.getToken(TinyCParser.MinusMinus, 0)

        def unaryOperator(self):
            return self.getTypedRuleContext(TinyCParser.UnaryOperatorContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(TinyCParser.CastExpressionContext,0)


        def Sizeof(self):
            return self.getToken(TinyCParser.Sizeof, 0)

        def LeftParen(self):
            return self.getToken(TinyCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(TinyCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(TinyCParser.RightParen, 0)

        def Alignof(self):
            return self.getToken(TinyCParser.Alignof, 0)

        def AndAnd(self):
            return self.getToken(TinyCParser.AndAnd, 0)

        def Identifier(self):
            return self.getToken(TinyCParser.Identifier, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_unaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpression" ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpression" ):
                listener.exitUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryExpression" ):
                return visitor.visitUnaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def unaryExpression(self):

        localctx = TinyCParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_unaryExpression)
        try:
            self.state = 370
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 348
                self.postfixExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 349
                self.match(TinyCParser.PlusPlus)
                self.state = 350
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 351
                self.match(TinyCParser.MinusMinus)
                self.state = 352
                self.unaryExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 353
                self.unaryOperator()
                self.state = 354
                self.castExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 356
                self.match(TinyCParser.Sizeof)
                self.state = 357
                self.unaryExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 358
                self.match(TinyCParser.Sizeof)
                self.state = 359
                self.match(TinyCParser.LeftParen)
                self.state = 360
                self.typeName()
                self.state = 361
                self.match(TinyCParser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 363
                self.match(TinyCParser.Alignof)
                self.state = 364
                self.match(TinyCParser.LeftParen)
                self.state = 365
                self.typeName()
                self.state = 366
                self.match(TinyCParser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 368
                self.match(TinyCParser.AndAnd)
                self.state = 369
                self.match(TinyCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(TinyCParser.And, 0)

        def Star(self):
            return self.getToken(TinyCParser.Star, 0)

        def Plus(self):
            return self.getToken(TinyCParser.Plus, 0)

        def Minus(self):
            return self.getToken(TinyCParser.Minus, 0)

        def Tilde(self):
            return self.getToken(TinyCParser.Tilde, 0)

        def Not(self):
            return self.getToken(TinyCParser.Not, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryOperator" ):
                return visitor.visitUnaryOperator(self)
            else:
                return visitor.visitChildren(self)




    def unaryOperator(self):

        localctx = TinyCParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            _la = self._input.LA(1)
            if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 12437) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(TinyCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(TinyCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(TinyCParser.RightParen, 0)

        def castExpression(self):
            return self.getTypedRuleContext(TinyCParser.CastExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(TinyCParser.UnaryExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(TinyCParser.DigitSequence, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_castExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastExpression" ):
                listener.enterCastExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastExpression" ):
                listener.exitCastExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastExpression" ):
                return visitor.visitCastExpression(self)
            else:
                return visitor.visitChildren(self)




    def castExpression(self):

        localctx = TinyCParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_castExpression)
        try:
            self.state = 387
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 374
                self.match(TinyCParser.LeftParen)
                self.state = 375
                self.typeName()
                self.state = 376
                self.match(TinyCParser.RightParen)
                self.state = 377
                self.castExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 379
                self.match(TinyCParser.T__0)
                self.state = 380
                self.match(TinyCParser.LeftParen)
                self.state = 381
                self.typeName()
                self.state = 382
                self.match(TinyCParser.RightParen)
                self.state = 383
                self.castExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 385
                self.unaryExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 386
                self.match(TinyCParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castExpression(self):
            return self.getTypedRuleContext(TinyCParser.CastExpressionContext,0)


        def multiplicativeExpression(self):
            return self.getTypedRuleContext(TinyCParser.MultiplicativeExpressionContext,0)


        def Star(self):
            return self.getToken(TinyCParser.Star, 0)

        def Div(self):
            return self.getToken(TinyCParser.Div, 0)

        def Mod(self):
            return self.getToken(TinyCParser.Mod, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)



    def multiplicativeExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.MultiplicativeExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 28
        self.enterRecursionRule(localctx, 28, self.RULE_multiplicativeExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.castExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 403
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 401
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                    if la_ == 1:
                        localctx = TinyCParser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 392
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 393
                        self.match(TinyCParser.Star)
                        self.state = 394
                        self.castExpression()
                        pass

                    elif la_ == 2:
                        localctx = TinyCParser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 395
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 396
                        self.match(TinyCParser.Div)
                        self.state = 397
                        self.castExpression()
                        pass

                    elif la_ == 3:
                        localctx = TinyCParser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 398
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 399
                        self.match(TinyCParser.Mod)
                        self.state = 400
                        self.castExpression()
                        pass

             
                self.state = 405
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(TinyCParser.MultiplicativeExpressionContext,0)


        def additiveExpression(self):
            return self.getTypedRuleContext(TinyCParser.AdditiveExpressionContext,0)


        def Plus(self):
            return self.getToken(TinyCParser.Plus, 0)

        def Minus(self):
            return self.getToken(TinyCParser.Minus, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)



    def additiveExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.AdditiveExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_additiveExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.multiplicativeExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 417
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 415
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
                    if la_ == 1:
                        localctx = TinyCParser.AdditiveExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpression)
                        self.state = 409
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 410
                        self.match(TinyCParser.Plus)
                        self.state = 411
                        self.multiplicativeExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = TinyCParser.AdditiveExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpression)
                        self.state = 412
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 413
                        self.match(TinyCParser.Minus)
                        self.state = 414
                        self.multiplicativeExpression(0)
                        pass

             
                self.state = 419
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ShiftExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self):
            return self.getTypedRuleContext(TinyCParser.AdditiveExpressionContext,0)


        def shiftExpression(self):
            return self.getTypedRuleContext(TinyCParser.ShiftExpressionContext,0)


        def LeftShift(self):
            return self.getToken(TinyCParser.LeftShift, 0)

        def RightShift(self):
            return self.getToken(TinyCParser.RightShift, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_shiftExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftExpression" ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftExpression" ):
                listener.exitShiftExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftExpression" ):
                return visitor.visitShiftExpression(self)
            else:
                return visitor.visitChildren(self)



    def shiftExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.ShiftExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 32
        self.enterRecursionRule(localctx, 32, self.RULE_shiftExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.additiveExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 431
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 429
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                    if la_ == 1:
                        localctx = TinyCParser.ShiftExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftExpression)
                        self.state = 423
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 424
                        self.match(TinyCParser.LeftShift)
                        self.state = 425
                        self.additiveExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = TinyCParser.ShiftExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftExpression)
                        self.state = 426
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 427
                        self.match(TinyCParser.RightShift)
                        self.state = 428
                        self.additiveExpression(0)
                        pass

             
                self.state = 433
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class RelationalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self):
            return self.getTypedRuleContext(TinyCParser.ShiftExpressionContext,0)


        def relationalExpression(self):
            return self.getTypedRuleContext(TinyCParser.RelationalExpressionContext,0)


        def Less(self):
            return self.getToken(TinyCParser.Less, 0)

        def Greater(self):
            return self.getToken(TinyCParser.Greater, 0)

        def LessEqual(self):
            return self.getToken(TinyCParser.LessEqual, 0)

        def GreaterEqual(self):
            return self.getToken(TinyCParser.GreaterEqual, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_relationalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalExpression" ):
                return visitor.visitRelationalExpression(self)
            else:
                return visitor.visitChildren(self)



    def relationalExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.RelationalExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 34
        self.enterRecursionRule(localctx, 34, self.RULE_relationalExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.shiftExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 451
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 449
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
                    if la_ == 1:
                        localctx = TinyCParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 437
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 438
                        self.match(TinyCParser.Less)
                        self.state = 439
                        self.shiftExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = TinyCParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 440
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 441
                        self.match(TinyCParser.Greater)
                        self.state = 442
                        self.shiftExpression(0)
                        pass

                    elif la_ == 3:
                        localctx = TinyCParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 443
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 444
                        self.match(TinyCParser.LessEqual)
                        self.state = 445
                        self.shiftExpression(0)
                        pass

                    elif la_ == 4:
                        localctx = TinyCParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 446
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 447
                        self.match(TinyCParser.GreaterEqual)
                        self.state = 448
                        self.shiftExpression(0)
                        pass

             
                self.state = 453
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self):
            return self.getTypedRuleContext(TinyCParser.RelationalExpressionContext,0)


        def equalityExpression(self):
            return self.getTypedRuleContext(TinyCParser.EqualityExpressionContext,0)


        def Equal(self):
            return self.getToken(TinyCParser.Equal, 0)

        def NotEqual(self):
            return self.getToken(TinyCParser.NotEqual, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_equalityExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpression" ):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)



    def equalityExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.EqualityExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 36
        self.enterRecursionRule(localctx, 36, self.RULE_equalityExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.relationalExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 465
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 463
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
                    if la_ == 1:
                        localctx = TinyCParser.EqualityExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                        self.state = 457
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 458
                        self.match(TinyCParser.Equal)
                        self.state = 459
                        self.relationalExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = TinyCParser.EqualityExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                        self.state = 460
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 461
                        self.match(TinyCParser.NotEqual)
                        self.state = 462
                        self.relationalExpression(0)
                        pass

             
                self.state = 467
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self):
            return self.getTypedRuleContext(TinyCParser.EqualityExpressionContext,0)


        def andExpression(self):
            return self.getTypedRuleContext(TinyCParser.AndExpressionContext,0)


        def And(self):
            return self.getToken(TinyCParser.And, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_andExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndExpression" ):
                listener.enterAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndExpression" ):
                listener.exitAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndExpression" ):
                return visitor.visitAndExpression(self)
            else:
                return visitor.visitChildren(self)



    def andExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.AndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 38
        self.enterRecursionRule(localctx, 38, self.RULE_andExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.equalityExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 476
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.AndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_andExpression)
                    self.state = 471
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 472
                    self.match(TinyCParser.And)
                    self.state = 473
                    self.equalityExpression(0) 
                self.state = 478
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self):
            return self.getTypedRuleContext(TinyCParser.AndExpressionContext,0)


        def exclusiveOrExpression(self):
            return self.getTypedRuleContext(TinyCParser.ExclusiveOrExpressionContext,0)


        def Caret(self):
            return self.getToken(TinyCParser.Caret, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_exclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveOrExpression" ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveOrExpression" ):
                listener.exitExclusiveOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExclusiveOrExpression" ):
                return visitor.visitExclusiveOrExpression(self)
            else:
                return visitor.visitChildren(self)



    def exclusiveOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.ExclusiveOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 40
        self.enterRecursionRule(localctx, 40, self.RULE_exclusiveOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.andExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 487
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,29,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.ExclusiveOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusiveOrExpression)
                    self.state = 482
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 483
                    self.match(TinyCParser.Caret)
                    self.state = 484
                    self.andExpression(0) 
                self.state = 489
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,29,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class InclusiveOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self):
            return self.getTypedRuleContext(TinyCParser.ExclusiveOrExpressionContext,0)


        def inclusiveOrExpression(self):
            return self.getTypedRuleContext(TinyCParser.InclusiveOrExpressionContext,0)


        def Or(self):
            return self.getToken(TinyCParser.Or, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_inclusiveOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveOrExpression" ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveOrExpression" ):
                listener.exitInclusiveOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclusiveOrExpression" ):
                return visitor.visitInclusiveOrExpression(self)
            else:
                return visitor.visitChildren(self)



    def inclusiveOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.InclusiveOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 42
        self.enterRecursionRule(localctx, 42, self.RULE_inclusiveOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 491
            self.exclusiveOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 498
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.InclusiveOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_inclusiveOrExpression)
                    self.state = 493
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 494
                    self.match(TinyCParser.Or)
                    self.state = 495
                    self.exclusiveOrExpression(0) 
                self.state = 500
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalAndExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self):
            return self.getTypedRuleContext(TinyCParser.InclusiveOrExpressionContext,0)


        def logicalAndExpression(self):
            return self.getTypedRuleContext(TinyCParser.LogicalAndExpressionContext,0)


        def AndAnd(self):
            return self.getToken(TinyCParser.AndAnd, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_logicalAndExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalAndExpression" ):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)



    def logicalAndExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.LogicalAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 44
        self.enterRecursionRule(localctx, 44, self.RULE_logicalAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.inclusiveOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 509
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.LogicalAndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalAndExpression)
                    self.state = 504
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 505
                    self.match(TinyCParser.AndAnd)
                    self.state = 506
                    self.inclusiveOrExpression(0) 
                self.state = 511
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalOrExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self):
            return self.getTypedRuleContext(TinyCParser.LogicalAndExpressionContext,0)


        def logicalOrExpression(self):
            return self.getTypedRuleContext(TinyCParser.LogicalOrExpressionContext,0)


        def OrOr(self):
            return self.getToken(TinyCParser.OrOr, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_logicalOrExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalOrExpression" ):
                return visitor.visitLogicalOrExpression(self)
            else:
                return visitor.visitChildren(self)



    def logicalOrExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.LogicalOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 46
        self.enterRecursionRule(localctx, 46, self.RULE_logicalOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.logicalAndExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 520
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.LogicalOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalOrExpression)
                    self.state = 515
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 516
                    self.match(TinyCParser.OrOr)
                    self.state = 517
                    self.logicalAndExpression(0) 
                self.state = 522
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(TinyCParser.LogicalOrExpressionContext,0)


        def Question(self):
            return self.getToken(TinyCParser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(TinyCParser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(TinyCParser.Colon, 0)

        def conditionalExpression(self):
            return self.getTypedRuleContext(TinyCParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalExpression" ):
                return visitor.visitConditionalExpression(self)
            else:
                return visitor.visitChildren(self)




    def conditionalExpression(self):

        localctx = TinyCParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_conditionalExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.logicalOrExpression(0)
            self.state = 529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 524
                self.match(TinyCParser.Question)
                self.state = 525
                self.expression(0)
                self.state = 526
                self.match(TinyCParser.Colon)
                self.state = 527
                self.conditionalExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(TinyCParser.ConditionalExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(TinyCParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(TinyCParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(TinyCParser.AssignmentExpressionContext,0)


        def DigitSequence(self):
            return self.getToken(TinyCParser.DigitSequence, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_assignmentExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentExpression" ):
                return visitor.visitAssignmentExpression(self)
            else:
                return visitor.visitChildren(self)




    def assignmentExpression(self):

        localctx = TinyCParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_assignmentExpression)
        try:
            self.state = 537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 531
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 532
                self.unaryExpression()
                self.state = 533
                self.assignmentOperator()
                self.state = 534
                self.assignmentExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 536
                self.match(TinyCParser.DigitSequence)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(TinyCParser.Assign, 0)

        def StarAssign(self):
            return self.getToken(TinyCParser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(TinyCParser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(TinyCParser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(TinyCParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(TinyCParser.MinusAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(TinyCParser.LeftShiftAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(TinyCParser.RightShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(TinyCParser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(TinyCParser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(TinyCParser.OrAssign, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentOperator" ):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentOperator(self):

        localctx = TinyCParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 539
            _la = self._input.LA(1)
            if not(((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & 2047) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(TinyCParser.AssignmentExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(TinyCParser.ExpressionContext,0)


        def Comma(self):
            return self.getToken(TinyCParser.Comma, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 54
        self.enterRecursionRule(localctx, 54, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.assignmentExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 549
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 544
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 545
                    self.match(TinyCParser.Comma)
                    self.state = 546
                    self.assignmentExpression() 
                self.state = 551
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConstantExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(TinyCParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_constantExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpression" ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpression" ):
                listener.exitConstantExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantExpression" ):
                return visitor.visitConstantExpression(self)
            else:
                return visitor.visitChildren(self)




    def constantExpression(self):

        localctx = TinyCParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 552
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(TinyCParser.DeclarationSpecifiersContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(TinyCParser.InitDeclaratorListContext,0)


        def Semi(self):
            return self.getToken(TinyCParser.Semi, 0)

        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(TinyCParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = TinyCParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_declaration)
        try:
            self.state = 562
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 554
                self.declarationSpecifiers()
                self.state = 555
                self.initDeclaratorList(0)
                self.state = 556
                self.match(TinyCParser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 558
                self.declarationSpecifiers()
                self.state = 559
                self.match(TinyCParser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 561
                self.staticAssertDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TinyCParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(TinyCParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return TinyCParser.RULE_declarationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers" ):
                listener.enterDeclarationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers" ):
                listener.exitDeclarationSpecifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationSpecifiers" ):
                return visitor.visitDeclarationSpecifiers(self)
            else:
                return visitor.visitChildren(self)




    def declarationSpecifiers(self):

        localctx = TinyCParser.DeclarationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_declarationSpecifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 564
                    self.declarationSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 567 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,37,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifiers2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TinyCParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(TinyCParser.DeclarationSpecifierContext,i)


        def getRuleIndex(self):
            return TinyCParser.RULE_declarationSpecifiers2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifiers2" ):
                listener.enterDeclarationSpecifiers2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifiers2" ):
                listener.exitDeclarationSpecifiers2(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationSpecifiers2" ):
                return visitor.visitDeclarationSpecifiers2(self)
            else:
                return visitor.visitChildren(self)




    def declarationSpecifiers2(self):

        localctx = TinyCParser.DeclarationSpecifiers2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_declarationSpecifiers2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 569
                    self.declarationSpecifier()

                else:
                    raise NoViableAltException(self)
                self.state = 572 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(TinyCParser.StorageClassSpecifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(TinyCParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(TinyCParser.TypeQualifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(TinyCParser.FunctionSpecifierContext,0)


        def alignmentSpecifier(self):
            return self.getTypedRuleContext(TinyCParser.AlignmentSpecifierContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_declarationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationSpecifier" ):
                listener.enterDeclarationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationSpecifier" ):
                listener.exitDeclarationSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationSpecifier" ):
                return visitor.visitDeclarationSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def declarationSpecifier(self):

        localctx = TinyCParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_declarationSpecifier)
        try:
            self.state = 579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 574
                self.storageClassSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 575
                self.typeSpecifier(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 576
                self.typeQualifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 577
                self.functionSpecifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 578
                self.alignmentSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self):
            return self.getTypedRuleContext(TinyCParser.InitDeclaratorContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(TinyCParser.InitDeclaratorListContext,0)


        def Comma(self):
            return self.getToken(TinyCParser.Comma, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_initDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclaratorList" ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclaratorList" ):
                listener.exitInitDeclaratorList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclaratorList" ):
                return visitor.visitInitDeclaratorList(self)
            else:
                return visitor.visitChildren(self)



    def initDeclaratorList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.InitDeclaratorListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 66
        self.enterRecursionRule(localctx, 66, self.RULE_initDeclaratorList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 582
            self.initDeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 589
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.InitDeclaratorListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initDeclaratorList)
                    self.state = 584
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 585
                    self.match(TinyCParser.Comma)
                    self.state = 586
                    self.initDeclarator() 
                self.state = 591
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class InitDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(TinyCParser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(TinyCParser.Assign, 0)

        def initializer(self):
            return self.getTypedRuleContext(TinyCParser.InitializerContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_initDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitDeclarator" ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitDeclarator" ):
                listener.exitInitDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitDeclarator" ):
                return visitor.visitInitDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def initDeclarator(self):

        localctx = TinyCParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_initDeclarator)
        try:
            self.state = 597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 592
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 593
                self.declarator()
                self.state = 594
                self.match(TinyCParser.Assign)
                self.state = 595
                self.initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageClassSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typedef(self):
            return self.getToken(TinyCParser.Typedef, 0)

        def Extern(self):
            return self.getToken(TinyCParser.Extern, 0)

        def Static(self):
            return self.getToken(TinyCParser.Static, 0)

        def ThreadLocal(self):
            return self.getToken(TinyCParser.ThreadLocal, 0)

        def Auto(self):
            return self.getToken(TinyCParser.Auto, 0)

        def Register(self):
            return self.getToken(TinyCParser.Register, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_storageClassSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageClassSpecifier" ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageClassSpecifier" ):
                listener.exitStorageClassSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageClassSpecifier" ):
                return visitor.visitStorageClassSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def storageClassSpecifier(self):

        localctx = TinyCParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 288240289003372544) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Void(self):
            return self.getToken(TinyCParser.Void, 0)

        def Char(self):
            return self.getToken(TinyCParser.Char, 0)

        def Short(self):
            return self.getToken(TinyCParser.Short, 0)

        def Int(self):
            return self.getToken(TinyCParser.Int, 0)

        def Long(self):
            return self.getToken(TinyCParser.Long, 0)

        def Float(self):
            return self.getToken(TinyCParser.Float, 0)

        def Double(self):
            return self.getToken(TinyCParser.Double, 0)

        def Signed(self):
            return self.getToken(TinyCParser.Signed, 0)

        def Unsigned(self):
            return self.getToken(TinyCParser.Unsigned, 0)

        def Bool(self):
            return self.getToken(TinyCParser.Bool, 0)

        def Complex(self):
            return self.getToken(TinyCParser.Complex, 0)

        def LeftParen(self):
            return self.getToken(TinyCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(TinyCParser.RightParen, 0)

        def atomicTypeSpecifier(self):
            return self.getTypedRuleContext(TinyCParser.AtomicTypeSpecifierContext,0)


        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(TinyCParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(TinyCParser.EnumSpecifierContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(TinyCParser.TypedefNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(TinyCParser.ConstantExpressionContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(TinyCParser.TypeSpecifierContext,0)


        def pointer(self):
            return self.getTypedRuleContext(TinyCParser.PointerContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_typeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeSpecifier" ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeSpecifier" ):
                listener.exitTypeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeSpecifier" ):
                return visitor.visitTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)



    def typeSpecifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.TypeSpecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 72
        self.enterRecursionRule(localctx, 72, self.RULE_typeSpecifier, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 616
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [4, 5, 6, 18, 23, 27, 32, 33, 37, 38, 45, 46, 52, 53]:
                self.state = 602
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 13616777343008880) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [1]:
                self.state = 603
                self.match(TinyCParser.T__0)
                self.state = 604
                self.match(TinyCParser.LeftParen)
                self.state = 605
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 112) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 606
                self.match(TinyCParser.RightParen)
                pass
            elif token in [51]:
                self.state = 607
                self.atomicTypeSpecifier()
                pass
            elif token in [41, 44]:
                self.state = 608
                self.structOrUnionSpecifier()
                pass
            elif token in [25]:
                self.state = 609
                self.enumSpecifier()
                pass
            elif token in [105]:
                self.state = 610
                self.typedefName()
                pass
            elif token in [7]:
                self.state = 611
                self.match(TinyCParser.T__6)
                self.state = 612
                self.match(TinyCParser.LeftParen)
                self.state = 613
                self.constantExpression()
                self.state = 614
                self.match(TinyCParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 622
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.TypeSpecifierContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeSpecifier)
                    self.state = 618
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 619
                    self.pointer() 
                self.state = 624
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class StructOrUnionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structOrUnion(self):
            return self.getTypedRuleContext(TinyCParser.StructOrUnionContext,0)


        def LeftBrace(self):
            return self.getToken(TinyCParser.LeftBrace, 0)

        def structDeclarationList(self):
            return self.getTypedRuleContext(TinyCParser.StructDeclarationListContext,0)


        def RightBrace(self):
            return self.getToken(TinyCParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(TinyCParser.Identifier, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_structOrUnionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnionSpecifier" ):
                listener.enterStructOrUnionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnionSpecifier" ):
                listener.exitStructOrUnionSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructOrUnionSpecifier" ):
                return visitor.visitStructOrUnionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def structOrUnionSpecifier(self):

        localctx = TinyCParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 625
                self.structOrUnion()
                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 626
                    self.match(TinyCParser.Identifier)


                self.state = 629
                self.match(TinyCParser.LeftBrace)
                self.state = 630
                self.structDeclarationList(0)
                self.state = 631
                self.match(TinyCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 633
                self.structOrUnion()
                self.state = 634
                self.match(TinyCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructOrUnionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Struct(self):
            return self.getToken(TinyCParser.Struct, 0)

        def Union(self):
            return self.getToken(TinyCParser.Union, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_structOrUnion

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructOrUnion" ):
                listener.enterStructOrUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructOrUnion" ):
                listener.exitStructOrUnion(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructOrUnion" ):
                return visitor.visitStructOrUnion(self)
            else:
                return visitor.visitChildren(self)




    def structOrUnion(self):

        localctx = TinyCParser.StructOrUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_structOrUnion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            _la = self._input.LA(1)
            if not(_la==41 or _la==44):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclarationListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclaration(self):
            return self.getTypedRuleContext(TinyCParser.StructDeclarationContext,0)


        def structDeclarationList(self):
            return self.getTypedRuleContext(TinyCParser.StructDeclarationListContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_structDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarationList" ):
                listener.enterStructDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarationList" ):
                listener.exitStructDeclarationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclarationList" ):
                return visitor.visitStructDeclarationList(self)
            else:
                return visitor.visitChildren(self)



    def structDeclarationList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.StructDeclarationListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_structDeclarationList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.structDeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 647
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,46,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.StructDeclarationListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_structDeclarationList)
                    self.state = 643
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 644
                    self.structDeclaration() 
                self.state = 649
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,46,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class StructDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(TinyCParser.SpecifierQualifierListContext,0)


        def Semi(self):
            return self.getToken(TinyCParser.Semi, 0)

        def structDeclaratorList(self):
            return self.getTypedRuleContext(TinyCParser.StructDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(TinyCParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_structDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaration" ):
                listener.enterStructDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaration" ):
                listener.exitStructDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclaration" ):
                return visitor.visitStructDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def structDeclaration(self):

        localctx = TinyCParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_structDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 657
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 4, 5, 6, 7, 18, 19, 23, 25, 27, 32, 33, 35, 37, 38, 41, 44, 45, 46, 47, 51, 52, 53, 105]:
                self.enterOuterAlt(localctx, 1)
                self.state = 650
                self.specifierQualifierList()
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & 70368886849537) != 0):
                    self.state = 651
                    self.structDeclaratorList(0)


                self.state = 654
                self.match(TinyCParser.Semi)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 2)
                self.state = 656
                self.staticAssertDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecifierQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(TinyCParser.TypeSpecifierContext,0)


        def specifierQualifierList(self):
            return self.getTypedRuleContext(TinyCParser.SpecifierQualifierListContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(TinyCParser.TypeQualifierContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_specifierQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecifierQualifierList" ):
                listener.enterSpecifierQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecifierQualifierList" ):
                listener.exitSpecifierQualifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecifierQualifierList" ):
                return visitor.visitSpecifierQualifierList(self)
            else:
                return visitor.visitChildren(self)




    def specifierQualifierList(self):

        localctx = TinyCParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_specifierQualifierList)
        try:
            self.state = 667
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 659
                self.typeSpecifier(0)
                self.state = 661
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
                if la_ == 1:
                    self.state = 660
                    self.specifierQualifierList()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 663
                self.typeQualifier()
                self.state = 665
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 664
                    self.specifierQualifierList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructDeclaratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def structDeclarator(self):
            return self.getTypedRuleContext(TinyCParser.StructDeclaratorContext,0)


        def structDeclaratorList(self):
            return self.getTypedRuleContext(TinyCParser.StructDeclaratorListContext,0)


        def Comma(self):
            return self.getToken(TinyCParser.Comma, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_structDeclaratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclaratorList" ):
                listener.enterStructDeclaratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclaratorList" ):
                listener.exitStructDeclaratorList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclaratorList" ):
                return visitor.visitStructDeclaratorList(self)
            else:
                return visitor.visitChildren(self)



    def structDeclaratorList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.StructDeclaratorListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_structDeclaratorList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 670
            self.structDeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 677
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.StructDeclaratorListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_structDeclaratorList)
                    self.state = 672
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 673
                    self.match(TinyCParser.Comma)
                    self.state = 674
                    self.structDeclarator() 
                self.state = 679
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class StructDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(TinyCParser.DeclaratorContext,0)


        def Colon(self):
            return self.getToken(TinyCParser.Colon, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(TinyCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_structDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStructDeclarator" ):
                listener.enterStructDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStructDeclarator" ):
                listener.exitStructDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStructDeclarator" ):
                return visitor.visitStructDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def structDeclarator(self):

        localctx = TinyCParser.StructDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_structDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 686
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 680
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & 70368752631809) != 0):
                    self.state = 681
                    self.declarator()


                self.state = 684
                self.match(TinyCParser.Colon)
                self.state = 685
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(TinyCParser.Enum, 0)

        def LeftBrace(self):
            return self.getToken(TinyCParser.LeftBrace, 0)

        def enumeratorList(self):
            return self.getTypedRuleContext(TinyCParser.EnumeratorListContext,0)


        def RightBrace(self):
            return self.getToken(TinyCParser.RightBrace, 0)

        def Identifier(self):
            return self.getToken(TinyCParser.Identifier, 0)

        def Comma(self):
            return self.getToken(TinyCParser.Comma, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_enumSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumSpecifier" ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumSpecifier" ):
                listener.exitEnumSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumSpecifier" ):
                return visitor.visitEnumSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def enumSpecifier(self):

        localctx = TinyCParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 688
                self.match(TinyCParser.Enum)
                self.state = 690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 689
                    self.match(TinyCParser.Identifier)


                self.state = 692
                self.match(TinyCParser.LeftBrace)
                self.state = 693
                self.enumeratorList(0)
                self.state = 694
                self.match(TinyCParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 696
                self.match(TinyCParser.Enum)
                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 697
                    self.match(TinyCParser.Identifier)


                self.state = 700
                self.match(TinyCParser.LeftBrace)
                self.state = 701
                self.enumeratorList(0)
                self.state = 702
                self.match(TinyCParser.Comma)
                self.state = 703
                self.match(TinyCParser.RightBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 705
                self.match(TinyCParser.Enum)
                self.state = 706
                self.match(TinyCParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self):
            return self.getTypedRuleContext(TinyCParser.EnumeratorContext,0)


        def enumeratorList(self):
            return self.getTypedRuleContext(TinyCParser.EnumeratorListContext,0)


        def Comma(self):
            return self.getToken(TinyCParser.Comma, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_enumeratorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorList" ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorList" ):
                listener.exitEnumeratorList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumeratorList" ):
                return visitor.visitEnumeratorList(self)
            else:
                return visitor.visitChildren(self)



    def enumeratorList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.EnumeratorListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 90
        self.enterRecursionRule(localctx, 90, self.RULE_enumeratorList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.enumerator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 717
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.EnumeratorListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_enumeratorList)
                    self.state = 712
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 713
                    self.match(TinyCParser.Comma)
                    self.state = 714
                    self.enumerator() 
                self.state = 719
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EnumeratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerationConstant(self):
            return self.getTypedRuleContext(TinyCParser.EnumerationConstantContext,0)


        def Assign(self):
            return self.getToken(TinyCParser.Assign, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(TinyCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerator" ):
                return visitor.visitEnumerator(self)
            else:
                return visitor.visitChildren(self)




    def enumerator(self):

        localctx = TinyCParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_enumerator)
        try:
            self.state = 725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 720
                self.enumerationConstant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 721
                self.enumerationConstant()
                self.state = 722
                self.match(TinyCParser.Assign)
                self.state = 723
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumerationConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(TinyCParser.Identifier, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_enumerationConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerationConstant" ):
                listener.enterEnumerationConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerationConstant" ):
                listener.exitEnumerationConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerationConstant" ):
                return visitor.visitEnumerationConstant(self)
            else:
                return visitor.visitChildren(self)




    def enumerationConstant(self):

        localctx = TinyCParser.EnumerationConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_enumerationConstant)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.match(TinyCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicTypeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atomic(self):
            return self.getToken(TinyCParser.Atomic, 0)

        def LeftParen(self):
            return self.getToken(TinyCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(TinyCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(TinyCParser.RightParen, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_atomicTypeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicTypeSpecifier" ):
                listener.enterAtomicTypeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicTypeSpecifier" ):
                listener.exitAtomicTypeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomicTypeSpecifier" ):
                return visitor.visitAtomicTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def atomicTypeSpecifier(self):

        localctx = TinyCParser.AtomicTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_atomicTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.match(TinyCParser.Atomic)
            self.state = 730
            self.match(TinyCParser.LeftParen)
            self.state = 731
            self.typeName()
            self.state = 732
            self.match(TinyCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(TinyCParser.Const, 0)

        def Restrict(self):
            return self.getToken(TinyCParser.Restrict, 0)

        def Volatile(self):
            return self.getToken(TinyCParser.Volatile, 0)

        def Atomic(self):
            return self.getToken(TinyCParser.Atomic, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_typeQualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifier" ):
                listener.enterTypeQualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifier" ):
                listener.exitTypeQualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeQualifier" ):
                return visitor.visitTypeQualifier(self)
            else:
                return visitor.visitChildren(self)




    def typeQualifier(self):

        localctx = TinyCParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_typeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2392571662303232) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(TinyCParser.Inline, 0)

        def Noreturn(self):
            return self.getToken(TinyCParser.Noreturn, 0)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(TinyCParser.GccAttributeSpecifierContext,0)


        def LeftParen(self):
            return self.getToken(TinyCParser.LeftParen, 0)

        def Identifier(self):
            return self.getToken(TinyCParser.Identifier, 0)

        def RightParen(self):
            return self.getToken(TinyCParser.RightParen, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_functionSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionSpecifier" ):
                listener.enterFunctionSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionSpecifier" ):
                listener.exitFunctionSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionSpecifier" ):
                return visitor.visitFunctionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def functionSpecifier(self):

        localctx = TinyCParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_functionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 742
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 9, 31, 56]:
                self.enterOuterAlt(localctx, 1)
                self.state = 736
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 72057596185412352) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 737
                self.gccAttributeSpecifier()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 3)
                self.state = 738
                self.match(TinyCParser.T__9)
                self.state = 739
                self.match(TinyCParser.LeftParen)
                self.state = 740
                self.match(TinyCParser.Identifier)
                self.state = 741
                self.match(TinyCParser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(TinyCParser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(TinyCParser.LeftParen, 0)

        def typeName(self):
            return self.getTypedRuleContext(TinyCParser.TypeNameContext,0)


        def RightParen(self):
            return self.getToken(TinyCParser.RightParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(TinyCParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_alignmentSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentSpecifier" ):
                listener.enterAlignmentSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentSpecifier" ):
                listener.exitAlignmentSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlignmentSpecifier" ):
                return visitor.visitAlignmentSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def alignmentSpecifier(self):

        localctx = TinyCParser.AlignmentSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_alignmentSpecifier)
        try:
            self.state = 754
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 744
                self.match(TinyCParser.Alignas)
                self.state = 745
                self.match(TinyCParser.LeftParen)
                self.state = 746
                self.typeName()
                self.state = 747
                self.match(TinyCParser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 749
                self.match(TinyCParser.Alignas)
                self.state = 750
                self.match(TinyCParser.LeftParen)
                self.state = 751
                self.constantExpression()
                self.state = 752
                self.match(TinyCParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(TinyCParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(TinyCParser.PointerContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TinyCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(TinyCParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return TinyCParser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarator" ):
                return visitor.visitDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def declarator(self):

        localctx = TinyCParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==75 or _la==82:
                self.state = 756
                self.pointer()


            self.state = 759
            self.directDeclarator(0)
            self.state = 763
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 760
                    self.gccDeclaratorExtension() 
                self.state = 765
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(TinyCParser.Identifier, 0)

        def LeftParen(self):
            return self.getToken(TinyCParser.LeftParen, 0)

        def declarator(self):
            return self.getTypedRuleContext(TinyCParser.DeclaratorContext,0)


        def RightParen(self):
            return self.getToken(TinyCParser.RightParen, 0)

        def Colon(self):
            return self.getToken(TinyCParser.Colon, 0)

        def DigitSequence(self):
            return self.getToken(TinyCParser.DigitSequence, 0)

        def directDeclarator(self):
            return self.getTypedRuleContext(TinyCParser.DirectDeclaratorContext,0)


        def LeftBracket(self):
            return self.getToken(TinyCParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(TinyCParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(TinyCParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(TinyCParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(TinyCParser.Static, 0)

        def Star(self):
            return self.getToken(TinyCParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(TinyCParser.ParameterTypeListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(TinyCParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_directDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectDeclarator" ):
                listener.enterDirectDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectDeclarator" ):
                listener.exitDirectDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirectDeclarator" ):
                return visitor.visitDirectDeclarator(self)
            else:
                return visitor.visitChildren(self)



    def directDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.DirectDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 106
        self.enterRecursionRule(localctx, 106, self.RULE_directDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 767
                self.match(TinyCParser.Identifier)
                pass

            elif la_ == 2:
                self.state = 768
                self.match(TinyCParser.LeftParen)
                self.state = 769
                self.declarator()
                self.state = 770
                self.match(TinyCParser.RightParen)
                pass

            elif la_ == 3:
                self.state = 772
                self.match(TinyCParser.Identifier)
                self.state = 773
                self.match(TinyCParser.Colon)
                self.state = 774
                self.match(TinyCParser.DigitSequence)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 822
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 820
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                    if la_ == 1:
                        localctx = TinyCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 777
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 778
                        self.match(TinyCParser.LeftBracket)
                        self.state = 780
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2392571662303232) != 0):
                            self.state = 779
                            self.typeQualifierList(0)


                        self.state = 783
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 595601600475561998) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 257698050719) != 0):
                            self.state = 782
                            self.assignmentExpression()


                        self.state = 785
                        self.match(TinyCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = TinyCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 786
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 787
                        self.match(TinyCParser.LeftBracket)
                        self.state = 788
                        self.match(TinyCParser.Static)
                        self.state = 790
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2392571662303232) != 0):
                            self.state = 789
                            self.typeQualifierList(0)


                        self.state = 792
                        self.assignmentExpression()
                        self.state = 793
                        self.match(TinyCParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = TinyCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 795
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 796
                        self.match(TinyCParser.LeftBracket)
                        self.state = 797
                        self.typeQualifierList(0)
                        self.state = 798
                        self.match(TinyCParser.Static)
                        self.state = 799
                        self.assignmentExpression()
                        self.state = 800
                        self.match(TinyCParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = TinyCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 802
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 803
                        self.match(TinyCParser.LeftBracket)
                        self.state = 805
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2392571662303232) != 0):
                            self.state = 804
                            self.typeQualifierList(0)


                        self.state = 807
                        self.match(TinyCParser.Star)
                        self.state = 808
                        self.match(TinyCParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = TinyCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 809
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 810
                        self.match(TinyCParser.LeftParen)
                        self.state = 811
                        self.parameterTypeList()
                        self.state = 812
                        self.match(TinyCParser.RightParen)
                        pass

                    elif la_ == 6:
                        localctx = TinyCParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 814
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 815
                        self.match(TinyCParser.LeftParen)
                        self.state = 817
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==105:
                            self.state = 816
                            self.identifierList(0)


                        self.state = 819
                        self.match(TinyCParser.RightParen)
                        pass

             
                self.state = 824
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class GccDeclaratorExtensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(TinyCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(TinyCParser.RightParen, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(TinyCParser.StringLiteral)
            else:
                return self.getToken(TinyCParser.StringLiteral, i)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(TinyCParser.GccAttributeSpecifierContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_gccDeclaratorExtension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccDeclaratorExtension" ):
                listener.enterGccDeclaratorExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccDeclaratorExtension" ):
                listener.exitGccDeclaratorExtension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGccDeclaratorExtension" ):
                return visitor.visitGccDeclaratorExtension(self)
            else:
                return visitor.visitChildren(self)




    def gccDeclaratorExtension(self):

        localctx = TinyCParser.GccDeclaratorExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_gccDeclaratorExtension)
        self._la = 0 # Token type
        try:
            self.state = 834
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [11]:
                self.enterOuterAlt(localctx, 1)
                self.state = 825
                self.match(TinyCParser.T__10)
                self.state = 826
                self.match(TinyCParser.LeftParen)
                self.state = 828 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 827
                    self.match(TinyCParser.StringLiteral)
                    self.state = 830 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==108):
                        break

                self.state = 832
                self.match(TinyCParser.RightParen)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 2)
                self.state = 833
                self.gccAttributeSpecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeSpecifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(TinyCParser.LeftParen)
            else:
                return self.getToken(TinyCParser.LeftParen, i)

        def gccAttributeList(self):
            return self.getTypedRuleContext(TinyCParser.GccAttributeListContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(TinyCParser.RightParen)
            else:
                return self.getToken(TinyCParser.RightParen, i)

        def getRuleIndex(self):
            return TinyCParser.RULE_gccAttributeSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeSpecifier" ):
                listener.enterGccAttributeSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeSpecifier" ):
                listener.exitGccAttributeSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGccAttributeSpecifier" ):
                return visitor.visitGccAttributeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def gccAttributeSpecifier(self):

        localctx = TinyCParser.GccAttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_gccAttributeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.match(TinyCParser.T__11)
            self.state = 837
            self.match(TinyCParser.LeftParen)
            self.state = 838
            self.match(TinyCParser.LeftParen)
            self.state = 839
            self.gccAttributeList()
            self.state = 840
            self.match(TinyCParser.RightParen)
            self.state = 841
            self.match(TinyCParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def gccAttribute(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TinyCParser.GccAttributeContext)
            else:
                return self.getTypedRuleContext(TinyCParser.GccAttributeContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(TinyCParser.Comma)
            else:
                return self.getToken(TinyCParser.Comma, i)

        def getRuleIndex(self):
            return TinyCParser.RULE_gccAttributeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttributeList" ):
                listener.enterGccAttributeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttributeList" ):
                listener.exitGccAttributeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGccAttributeList" ):
                return visitor.visitGccAttributeList(self)
            else:
                return visitor.visitChildren(self)




    def gccAttributeList(self):

        localctx = TinyCParser.GccAttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_gccAttributeList)
        self._la = 0 # Token type
        try:
            self.state = 852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 843
                self.gccAttribute()
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==88:
                    self.state = 844
                    self.match(TinyCParser.Comma)
                    self.state = 845
                    self.gccAttribute()
                    self.state = 850
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GccAttributeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Comma(self):
            return self.getToken(TinyCParser.Comma, 0)

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(TinyCParser.LeftParen)
            else:
                return self.getToken(TinyCParser.LeftParen, i)

        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(TinyCParser.RightParen)
            else:
                return self.getToken(TinyCParser.RightParen, i)

        def argumentExpressionList(self):
            return self.getTypedRuleContext(TinyCParser.ArgumentExpressionListContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_gccAttribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGccAttribute" ):
                listener.enterGccAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGccAttribute" ):
                listener.exitGccAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGccAttribute" ):
                return visitor.visitGccAttribute(self)
            else:
                return visitor.visitChildren(self)




    def gccAttribute(self):

        localctx = TinyCParser.GccAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_gccAttribute)
        self._la = 0 # Token type
        try:
            self.state = 863
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118]:
                self.enterOuterAlt(localctx, 1)
                self.state = 854
                _la = self._input.LA(1)
                if _la <= 0 or ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & 536870915) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59:
                    self.state = 855
                    self.match(TinyCParser.LeftParen)
                    self.state = 857
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 595601600475561998) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 257698050719) != 0):
                        self.state = 856
                        self.argumentExpressionList(0)


                    self.state = 859
                    self.match(TinyCParser.RightParen)


                pass
            elif token in [60, 88]:
                self.enterOuterAlt(localctx, 2)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestedParenthesesBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(TinyCParser.LeftParen)
            else:
                return self.getToken(TinyCParser.LeftParen, i)

        def nestedParenthesesBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TinyCParser.NestedParenthesesBlockContext)
            else:
                return self.getTypedRuleContext(TinyCParser.NestedParenthesesBlockContext,i)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(TinyCParser.RightParen)
            else:
                return self.getToken(TinyCParser.RightParen, i)

        def getRuleIndex(self):
            return TinyCParser.RULE_nestedParenthesesBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedParenthesesBlock" ):
                listener.enterNestedParenthesesBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedParenthesesBlock" ):
                listener.exitNestedParenthesesBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestedParenthesesBlock" ):
                return visitor.visitNestedParenthesesBlock(self)
            else:
                return visitor.visitChildren(self)




    def nestedParenthesesBlock(self):

        localctx = TinyCParser.NestedParenthesesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_nestedParenthesesBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -1152921504606846978) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 36028797018963967) != 0):
                self.state = 870
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118]:
                    self.state = 865
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==59 or _la==60:
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass
                elif token in [59]:
                    self.state = 866
                    self.match(TinyCParser.LeftParen)
                    self.state = 867
                    self.nestedParenthesesBlock()
                    self.state = 868
                    self.match(TinyCParser.RightParen)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self):
            return self.getToken(TinyCParser.Star, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(TinyCParser.TypeQualifierListContext,0)


        def pointer(self):
            return self.getTypedRuleContext(TinyCParser.PointerContext,0)


        def Caret(self):
            return self.getToken(TinyCParser.Caret, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_pointer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointer" ):
                listener.enterPointer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointer" ):
                listener.exitPointer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointer" ):
                return visitor.visitPointer(self)
            else:
                return visitor.visitChildren(self)




    def pointer(self):

        localctx = TinyCParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_pointer)
        self._la = 0 # Token type
        try:
            self.state = 893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 875
                self.match(TinyCParser.Star)
                self.state = 877
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 876
                    self.typeQualifierList(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 879
                self.match(TinyCParser.Star)
                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2392571662303232) != 0):
                    self.state = 880
                    self.typeQualifierList(0)


                self.state = 883
                self.pointer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 884
                self.match(TinyCParser.Caret)
                self.state = 886
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 885
                    self.typeQualifierList(0)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 888
                self.match(TinyCParser.Caret)
                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2392571662303232) != 0):
                    self.state = 889
                    self.typeQualifierList(0)


                self.state = 892
                self.pointer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeQualifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeQualifier(self):
            return self.getTypedRuleContext(TinyCParser.TypeQualifierContext,0)


        def typeQualifierList(self):
            return self.getTypedRuleContext(TinyCParser.TypeQualifierListContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_typeQualifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeQualifierList" ):
                listener.enterTypeQualifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeQualifierList" ):
                listener.exitTypeQualifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeQualifierList" ):
                return visitor.visitTypeQualifierList(self)
            else:
                return visitor.visitChildren(self)



    def typeQualifierList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.TypeQualifierListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 120
        self.enterRecursionRule(localctx, 120, self.RULE_typeQualifierList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896
            self.typeQualifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 902
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,86,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.TypeQualifierListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeQualifierList)
                    self.state = 898
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 899
                    self.typeQualifier() 
                self.state = 904
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,86,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParameterTypeListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterList(self):
            return self.getTypedRuleContext(TinyCParser.ParameterListContext,0)


        def Comma(self):
            return self.getToken(TinyCParser.Comma, 0)

        def Ellipsis(self):
            return self.getToken(TinyCParser.Ellipsis, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_parameterTypeList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterTypeList" ):
                listener.enterParameterTypeList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterTypeList" ):
                listener.exitParameterTypeList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterTypeList" ):
                return visitor.visitParameterTypeList(self)
            else:
                return visitor.visitChildren(self)




    def parameterTypeList(self):

        localctx = TinyCParser.ParameterTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_parameterTypeList)
        try:
            self.state = 910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 905
                self.parameterList(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 906
                self.parameterList(0)
                self.state = 907
                self.match(TinyCParser.Comma)
                self.state = 908
                self.match(TinyCParser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self):
            return self.getTypedRuleContext(TinyCParser.ParameterDeclarationContext,0)


        def parameterList(self):
            return self.getTypedRuleContext(TinyCParser.ParameterListContext,0)


        def Comma(self):
            return self.getToken(TinyCParser.Comma, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_parameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterList" ):
                listener.enterParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterList" ):
                listener.exitParameterList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterList" ):
                return visitor.visitParameterList(self)
            else:
                return visitor.visitChildren(self)



    def parameterList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.ParameterListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 124
        self.enterRecursionRule(localctx, 124, self.RULE_parameterList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.parameterDeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 920
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.ParameterListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_parameterList)
                    self.state = 915
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 916
                    self.match(TinyCParser.Comma)
                    self.state = 917
                    self.parameterDeclaration() 
                self.state = 922
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParameterDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(TinyCParser.DeclarationSpecifiersContext,0)


        def declarator(self):
            return self.getTypedRuleContext(TinyCParser.DeclaratorContext,0)


        def declarationSpecifiers2(self):
            return self.getTypedRuleContext(TinyCParser.DeclarationSpecifiers2Context,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(TinyCParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_parameterDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterDeclaration" ):
                listener.enterParameterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterDeclaration" ):
                listener.exitParameterDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterDeclaration" ):
                return visitor.visitParameterDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def parameterDeclaration(self):

        localctx = TinyCParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_parameterDeclaration)
        try:
            self.state = 930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 923
                self.declarationSpecifiers()
                self.state = 924
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 926
                self.declarationSpecifiers2()
                self.state = 928
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 927
                    self.abstractDeclarator()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(TinyCParser.Identifier, 0)

        def identifierList(self):
            return self.getTypedRuleContext(TinyCParser.IdentifierListContext,0)


        def Comma(self):
            return self.getToken(TinyCParser.Comma, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_identifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierList" ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierList" ):
                listener.exitIdentifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierList" ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)



    def identifierList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.IdentifierListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 128
        self.enterRecursionRule(localctx, 128, self.RULE_identifierList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.match(TinyCParser.Identifier)
            self._ctx.stop = self._input.LT(-1)
            self.state = 940
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.IdentifierListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_identifierList)
                    self.state = 935
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 936
                    self.match(TinyCParser.Comma)
                    self.state = 937
                    self.match(TinyCParser.Identifier) 
                self.state = 942
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(TinyCParser.SpecifierQualifierListContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(TinyCParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)




    def typeName(self):

        localctx = TinyCParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_typeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.specifierQualifierList()
            self.state = 945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & 8454149) != 0):
                self.state = 944
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(TinyCParser.PointerContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(TinyCParser.DirectAbstractDeclaratorContext,0)


        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TinyCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(TinyCParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return TinyCParser.RULE_abstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractDeclarator" ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractDeclarator" ):
                listener.exitAbstractDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractDeclarator" ):
                return visitor.visitAbstractDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def abstractDeclarator(self):

        localctx = TinyCParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_abstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 958
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 947
                self.pointer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==75 or _la==82:
                    self.state = 948
                    self.pointer()


                self.state = 951
                self.directAbstractDeclarator(0)
                self.state = 955
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,94,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 952
                        self.gccDeclaratorExtension() 
                    self.state = 957
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,94,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectAbstractDeclaratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(TinyCParser.LeftParen, 0)

        def abstractDeclarator(self):
            return self.getTypedRuleContext(TinyCParser.AbstractDeclaratorContext,0)


        def RightParen(self):
            return self.getToken(TinyCParser.RightParen, 0)

        def gccDeclaratorExtension(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TinyCParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(TinyCParser.GccDeclaratorExtensionContext,i)


        def LeftBracket(self):
            return self.getToken(TinyCParser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(TinyCParser.RightBracket, 0)

        def typeQualifierList(self):
            return self.getTypedRuleContext(TinyCParser.TypeQualifierListContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(TinyCParser.AssignmentExpressionContext,0)


        def Static(self):
            return self.getToken(TinyCParser.Static, 0)

        def Star(self):
            return self.getToken(TinyCParser.Star, 0)

        def parameterTypeList(self):
            return self.getTypedRuleContext(TinyCParser.ParameterTypeListContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(TinyCParser.DirectAbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_directAbstractDeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDirectAbstractDeclarator" ):
                listener.enterDirectAbstractDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDirectAbstractDeclarator" ):
                listener.exitDirectAbstractDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirectAbstractDeclarator" ):
                return visitor.visitDirectAbstractDeclarator(self)
            else:
                return visitor.visitChildren(self)



    def directAbstractDeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.DirectAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 134
        self.enterRecursionRule(localctx, 134, self.RULE_directAbstractDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 961
                self.match(TinyCParser.LeftParen)
                self.state = 962
                self.abstractDeclarator()
                self.state = 963
                self.match(TinyCParser.RightParen)
                self.state = 967
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,96,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 964
                        self.gccDeclaratorExtension() 
                    self.state = 969
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,96,self._ctx)

                pass

            elif la_ == 2:
                self.state = 970
                self.match(TinyCParser.LeftBracket)
                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2392571662303232) != 0):
                    self.state = 971
                    self.typeQualifierList(0)


                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 595601600475561998) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 257698050719) != 0):
                    self.state = 974
                    self.assignmentExpression()


                self.state = 977
                self.match(TinyCParser.RightBracket)
                pass

            elif la_ == 3:
                self.state = 978
                self.match(TinyCParser.LeftBracket)
                self.state = 979
                self.match(TinyCParser.Static)
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2392571662303232) != 0):
                    self.state = 980
                    self.typeQualifierList(0)


                self.state = 983
                self.assignmentExpression()
                self.state = 984
                self.match(TinyCParser.RightBracket)
                pass

            elif la_ == 4:
                self.state = 986
                self.match(TinyCParser.LeftBracket)
                self.state = 987
                self.typeQualifierList(0)
                self.state = 988
                self.match(TinyCParser.Static)
                self.state = 989
                self.assignmentExpression()
                self.state = 990
                self.match(TinyCParser.RightBracket)
                pass

            elif la_ == 5:
                self.state = 992
                self.match(TinyCParser.LeftBracket)
                self.state = 993
                self.match(TinyCParser.Star)
                self.state = 994
                self.match(TinyCParser.RightBracket)
                pass

            elif la_ == 6:
                self.state = 995
                self.match(TinyCParser.LeftParen)
                self.state = 997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 376889975390377970) != 0) or _la==105:
                    self.state = 996
                    self.parameterTypeList()


                self.state = 999
                self.match(TinyCParser.RightParen)
                self.state = 1003
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1000
                        self.gccDeclaratorExtension() 
                    self.state = 1005
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1051
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1049
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                    if la_ == 1:
                        localctx = TinyCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 1008
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1009
                        self.match(TinyCParser.LeftBracket)
                        self.state = 1011
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2392571662303232) != 0):
                            self.state = 1010
                            self.typeQualifierList(0)


                        self.state = 1014
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 595601600475561998) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 257698050719) != 0):
                            self.state = 1013
                            self.assignmentExpression()


                        self.state = 1016
                        self.match(TinyCParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = TinyCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 1017
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1018
                        self.match(TinyCParser.LeftBracket)
                        self.state = 1019
                        self.match(TinyCParser.Static)
                        self.state = 1021
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 2392571662303232) != 0):
                            self.state = 1020
                            self.typeQualifierList(0)


                        self.state = 1023
                        self.assignmentExpression()
                        self.state = 1024
                        self.match(TinyCParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = TinyCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 1026
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1027
                        self.match(TinyCParser.LeftBracket)
                        self.state = 1028
                        self.typeQualifierList(0)
                        self.state = 1029
                        self.match(TinyCParser.Static)
                        self.state = 1030
                        self.assignmentExpression()
                        self.state = 1031
                        self.match(TinyCParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = TinyCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 1033
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1034
                        self.match(TinyCParser.LeftBracket)
                        self.state = 1035
                        self.match(TinyCParser.Star)
                        self.state = 1036
                        self.match(TinyCParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = TinyCParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 1037
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1038
                        self.match(TinyCParser.LeftParen)
                        self.state = 1040
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & 376889975390377970) != 0) or _la==105:
                            self.state = 1039
                            self.parameterTypeList()


                        self.state = 1042
                        self.match(TinyCParser.RightParen)
                        self.state = 1046
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,107,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1043
                                self.gccDeclaratorExtension() 
                            self.state = 1048
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

                        pass

             
                self.state = 1053
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypedefNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(TinyCParser.Identifier, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_typedefName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefName" ):
                listener.enterTypedefName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefName" ):
                listener.exitTypedefName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedefName" ):
                return visitor.visitTypedefName(self)
            else:
                return visitor.visitChildren(self)




    def typedefName(self):

        localctx = TinyCParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.match(TinyCParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(TinyCParser.AssignmentExpressionContext,0)


        def LeftBrace(self):
            return self.getToken(TinyCParser.LeftBrace, 0)

        def initializerList(self):
            return self.getTypedRuleContext(TinyCParser.InitializerListContext,0)


        def RightBrace(self):
            return self.getToken(TinyCParser.RightBrace, 0)

        def Comma(self):
            return self.getToken(TinyCParser.Comma, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = TinyCParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_initializer)
        try:
            self.state = 1066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1056
                self.assignmentExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1057
                self.match(TinyCParser.LeftBrace)
                self.state = 1058
                self.initializerList(0)
                self.state = 1059
                self.match(TinyCParser.RightBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1061
                self.match(TinyCParser.LeftBrace)
                self.state = 1062
                self.initializerList(0)
                self.state = 1063
                self.match(TinyCParser.Comma)
                self.state = 1064
                self.match(TinyCParser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializer(self):
            return self.getTypedRuleContext(TinyCParser.InitializerContext,0)


        def designation(self):
            return self.getTypedRuleContext(TinyCParser.DesignationContext,0)


        def initializerList(self):
            return self.getTypedRuleContext(TinyCParser.InitializerListContext,0)


        def Comma(self):
            return self.getToken(TinyCParser.Comma, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_initializerList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerList" ):
                listener.enterInitializerList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerList" ):
                listener.exitInitializerList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerList" ):
                return visitor.visitInitializerList(self)
            else:
                return visitor.visitChildren(self)



    def initializerList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.InitializerListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 140
        self.enterRecursionRule(localctx, 140, self.RULE_initializerList, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61 or _la==103:
                self.state = 1069
                self.designation()


            self.state = 1072
            self.initializer()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1082
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.InitializerListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initializerList)
                    self.state = 1074
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1075
                    self.match(TinyCParser.Comma)
                    self.state = 1077
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==61 or _la==103:
                        self.state = 1076
                        self.designation()


                    self.state = 1079
                    self.initializer() 
                self.state = 1084
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DesignationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designatorList(self):
            return self.getTypedRuleContext(TinyCParser.DesignatorListContext,0)


        def Assign(self):
            return self.getToken(TinyCParser.Assign, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_designation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignation" ):
                listener.enterDesignation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignation" ):
                listener.exitDesignation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignation" ):
                return visitor.visitDesignation(self)
            else:
                return visitor.visitChildren(self)




    def designation(self):

        localctx = TinyCParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.designatorList(0)
            self.state = 1086
            self.match(TinyCParser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DesignatorListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def designator(self):
            return self.getTypedRuleContext(TinyCParser.DesignatorContext,0)


        def designatorList(self):
            return self.getTypedRuleContext(TinyCParser.DesignatorListContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_designatorList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignatorList" ):
                listener.enterDesignatorList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignatorList" ):
                listener.exitDesignatorList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignatorList" ):
                return visitor.visitDesignatorList(self)
            else:
                return visitor.visitChildren(self)



    def designatorList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.DesignatorListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 144
        self.enterRecursionRule(localctx, 144, self.RULE_designatorList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1089
            self.designator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1095
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,114,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.DesignatorListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_designatorList)
                    self.state = 1091
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1092
                    self.designator() 
                self.state = 1097
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,114,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DesignatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(TinyCParser.LeftBracket, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(TinyCParser.ConstantExpressionContext,0)


        def RightBracket(self):
            return self.getToken(TinyCParser.RightBracket, 0)

        def Dot(self):
            return self.getToken(TinyCParser.Dot, 0)

        def Identifier(self):
            return self.getToken(TinyCParser.Identifier, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_designator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDesignator" ):
                listener.enterDesignator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDesignator" ):
                listener.exitDesignator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDesignator" ):
                return visitor.visitDesignator(self)
            else:
                return visitor.visitChildren(self)




    def designator(self):

        localctx = TinyCParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_designator)
        try:
            self.state = 1104
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1098
                self.match(TinyCParser.LeftBracket)
                self.state = 1099
                self.constantExpression()
                self.state = 1100
                self.match(TinyCParser.RightBracket)
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1102
                self.match(TinyCParser.Dot)
                self.state = 1103
                self.match(TinyCParser.Identifier)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StaticAssertDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def StaticAssert(self):
            return self.getToken(TinyCParser.StaticAssert, 0)

        def LeftParen(self):
            return self.getToken(TinyCParser.LeftParen, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(TinyCParser.ConstantExpressionContext,0)


        def Comma(self):
            return self.getToken(TinyCParser.Comma, 0)

        def RightParen(self):
            return self.getToken(TinyCParser.RightParen, 0)

        def Semi(self):
            return self.getToken(TinyCParser.Semi, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(TinyCParser.StringLiteral)
            else:
                return self.getToken(TinyCParser.StringLiteral, i)

        def getRuleIndex(self):
            return TinyCParser.RULE_staticAssertDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStaticAssertDeclaration" ):
                listener.enterStaticAssertDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStaticAssertDeclaration" ):
                listener.exitStaticAssertDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStaticAssertDeclaration" ):
                return visitor.visitStaticAssertDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def staticAssertDeclaration(self):

        localctx = TinyCParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_staticAssertDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1106
            self.match(TinyCParser.StaticAssert)
            self.state = 1107
            self.match(TinyCParser.LeftParen)
            self.state = 1108
            self.constantExpression()
            self.state = 1109
            self.match(TinyCParser.Comma)
            self.state = 1111 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1110
                self.match(TinyCParser.StringLiteral)
                self.state = 1113 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==108):
                    break

            self.state = 1115
            self.match(TinyCParser.RightParen)
            self.state = 1116
            self.match(TinyCParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(TinyCParser.LabeledStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(TinyCParser.CompoundStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(TinyCParser.ExpressionStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(TinyCParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(TinyCParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(TinyCParser.JumpStatementContext,0)


        def LeftParen(self):
            return self.getToken(TinyCParser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(TinyCParser.RightParen, 0)

        def Semi(self):
            return self.getToken(TinyCParser.Semi, 0)

        def Volatile(self):
            return self.getToken(TinyCParser.Volatile, 0)

        def logicalOrExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TinyCParser.LogicalOrExpressionContext)
            else:
                return self.getTypedRuleContext(TinyCParser.LogicalOrExpressionContext,i)


        def Colon(self, i:int=None):
            if i is None:
                return self.getTokens(TinyCParser.Colon)
            else:
                return self.getToken(TinyCParser.Colon, i)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(TinyCParser.Comma)
            else:
                return self.getToken(TinyCParser.Comma, i)

        def getRuleIndex(self):
            return TinyCParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = TinyCParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1155
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1118
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1119
                self.compoundStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1120
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1121
                self.selectionStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1122
                self.iterationStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1123
                self.jumpStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1124
                _la = self._input.LA(1)
                if not(_la==11 or _la==13):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1125
                _la = self._input.LA(1)
                if not(_la==14 or _la==47):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1126
                self.match(TinyCParser.LeftParen)
                self.state = 1135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 595601600475561998) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 257698050719) != 0):
                    self.state = 1127
                    self.logicalOrExpression(0)
                    self.state = 1132
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==88:
                        self.state = 1128
                        self.match(TinyCParser.Comma)
                        self.state = 1129
                        self.logicalOrExpression(0)
                        self.state = 1134
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==86:
                    self.state = 1137
                    self.match(TinyCParser.Colon)
                    self.state = 1146
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 595601600475561998) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 257698050719) != 0):
                        self.state = 1138
                        self.logicalOrExpression(0)
                        self.state = 1143
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==88:
                            self.state = 1139
                            self.match(TinyCParser.Comma)
                            self.state = 1140
                            self.logicalOrExpression(0)
                            self.state = 1145
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 1152
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1153
                self.match(TinyCParser.RightParen)
                self.state = 1154
                self.match(TinyCParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(TinyCParser.Identifier, 0)

        def Colon(self):
            return self.getToken(TinyCParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(TinyCParser.StatementContext,0)


        def Case(self):
            return self.getToken(TinyCParser.Case, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(TinyCParser.ConstantExpressionContext,0)


        def Default(self):
            return self.getToken(TinyCParser.Default, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_labeledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledStatement" ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledStatement" ):
                listener.exitLabeledStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledStatement" ):
                return visitor.visitLabeledStatement(self)
            else:
                return visitor.visitChildren(self)




    def labeledStatement(self):

        localctx = TinyCParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_labeledStatement)
        try:
            self.state = 1168
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [105]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1157
                self.match(TinyCParser.Identifier)
                self.state = 1158
                self.match(TinyCParser.Colon)
                self.state = 1159
                self.statement()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1160
                self.match(TinyCParser.Case)
                self.state = 1161
                self.constantExpression()
                self.state = 1162
                self.match(TinyCParser.Colon)
                self.state = 1163
                self.statement()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1165
                self.match(TinyCParser.Default)
                self.state = 1166
                self.match(TinyCParser.Colon)
                self.state = 1167
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(TinyCParser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(TinyCParser.RightBrace, 0)

        def blockItemList(self):
            return self.getTypedRuleContext(TinyCParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundStatement" ):
                return visitor.visitCompoundStatement(self)
            else:
                return visitor.visitChildren(self)




    def compoundStatement(self):

        localctx = TinyCParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1170
            self.match(TinyCParser.LeftBrace)
            self.state = 1172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & -8106479329283686402) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 257698116255) != 0):
                self.state = 1171
                self.blockItemList(0)


            self.state = 1174
            self.match(TinyCParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockItemListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockItem(self):
            return self.getTypedRuleContext(TinyCParser.BlockItemContext,0)


        def blockItemList(self):
            return self.getTypedRuleContext(TinyCParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_blockItemList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItemList" ):
                listener.enterBlockItemList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItemList" ):
                listener.exitBlockItemList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockItemList" ):
                return visitor.visitBlockItemList(self)
            else:
                return visitor.visitChildren(self)



    def blockItemList(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.BlockItemListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 156
        self.enterRecursionRule(localctx, 156, self.RULE_blockItemList, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1177
            self.blockItem()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1183
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,125,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.BlockItemListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_blockItemList)
                    self.state = 1179
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1180
                    self.blockItem() 
                self.state = 1185
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,125,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BlockItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(TinyCParser.StatementContext,0)


        def declaration(self):
            return self.getTypedRuleContext(TinyCParser.DeclarationContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_blockItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockItem" ):
                listener.enterBlockItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockItem" ):
                listener.exitBlockItem(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockItem" ):
                return visitor.visitBlockItem(self)
            else:
                return visitor.visitChildren(self)




    def blockItem(self):

        localctx = TinyCParser.BlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_blockItem)
        try:
            self.state = 1188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1186
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1187
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(TinyCParser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(TinyCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStatement" ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = TinyCParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 595601600475561998) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 257698050719) != 0):
                self.state = 1190
                self.expression(0)


            self.state = 1193
            self.match(TinyCParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(TinyCParser.If, 0)

        def LeftParen(self):
            return self.getToken(TinyCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(TinyCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(TinyCParser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TinyCParser.StatementContext)
            else:
                return self.getTypedRuleContext(TinyCParser.StatementContext,i)


        def Else(self):
            return self.getToken(TinyCParser.Else, 0)

        def Switch(self):
            return self.getToken(TinyCParser.Switch, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_selectionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionStatement" ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionStatement" ):
                listener.exitSelectionStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionStatement" ):
                return visitor.visitSelectionStatement(self)
            else:
                return visitor.visitChildren(self)




    def selectionStatement(self):

        localctx = TinyCParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_selectionStatement)
        try:
            self.state = 1210
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [30]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1195
                self.match(TinyCParser.If)
                self.state = 1196
                self.match(TinyCParser.LeftParen)
                self.state = 1197
                self.expression(0)
                self.state = 1198
                self.match(TinyCParser.RightParen)
                self.state = 1199
                self.statement()
                self.state = 1202
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                if la_ == 1:
                    self.state = 1200
                    self.match(TinyCParser.Else)
                    self.state = 1201
                    self.statement()


                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1204
                self.match(TinyCParser.Switch)
                self.state = 1205
                self.match(TinyCParser.LeftParen)
                self.state = 1206
                self.expression(0)
                self.state = 1207
                self.match(TinyCParser.RightParen)
                self.state = 1208
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(TinyCParser.While, 0)

        def LeftParen(self):
            return self.getToken(TinyCParser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(TinyCParser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(TinyCParser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(TinyCParser.StatementContext,0)


        def Do(self):
            return self.getToken(TinyCParser.Do, 0)

        def Semi(self):
            return self.getToken(TinyCParser.Semi, 0)

        def For(self):
            return self.getToken(TinyCParser.For, 0)

        def forCondition(self):
            return self.getTypedRuleContext(TinyCParser.ForConditionContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_iterationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationStatement" ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationStatement" ):
                listener.exitIterationStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationStatement" ):
                return visitor.visitIterationStatement(self)
            else:
                return visitor.visitChildren(self)




    def iterationStatement(self):

        localctx = TinyCParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_iterationStatement)
        try:
            self.state = 1232
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1212
                self.match(TinyCParser.While)
                self.state = 1213
                self.match(TinyCParser.LeftParen)
                self.state = 1214
                self.expression(0)
                self.state = 1215
                self.match(TinyCParser.RightParen)
                self.state = 1216
                self.statement()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1218
                self.match(TinyCParser.Do)
                self.state = 1219
                self.statement()
                self.state = 1220
                self.match(TinyCParser.While)
                self.state = 1221
                self.match(TinyCParser.LeftParen)
                self.state = 1222
                self.expression(0)
                self.state = 1223
                self.match(TinyCParser.RightParen)
                self.state = 1224
                self.match(TinyCParser.Semi)
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1226
                self.match(TinyCParser.For)
                self.state = 1227
                self.match(TinyCParser.LeftParen)
                self.state = 1228
                self.forCondition()
                self.state = 1229
                self.match(TinyCParser.RightParen)
                self.state = 1230
                self.statement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forDeclaration(self):
            return self.getTypedRuleContext(TinyCParser.ForDeclarationContext,0)


        def Semi(self, i:int=None):
            if i is None:
                return self.getTokens(TinyCParser.Semi)
            else:
                return self.getToken(TinyCParser.Semi, i)

        def forExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(TinyCParser.ForExpressionContext)
            else:
                return self.getTypedRuleContext(TinyCParser.ForExpressionContext,i)


        def expression(self):
            return self.getTypedRuleContext(TinyCParser.ExpressionContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_forCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForCondition" ):
                listener.enterForCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForCondition" ):
                listener.exitForCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForCondition" ):
                return visitor.visitForCondition(self)
            else:
                return visitor.visitChildren(self)




    def forCondition(self):

        localctx = TinyCParser.ForConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_forCondition)
        self._la = 0 # Token type
        try:
            self.state = 1254
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1234
                self.forDeclaration()
                self.state = 1235
                self.match(TinyCParser.Semi)
                self.state = 1237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 595601600475561998) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 257698050719) != 0):
                    self.state = 1236
                    self.forExpression(0)


                self.state = 1239
                self.match(TinyCParser.Semi)
                self.state = 1241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 595601600475561998) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 257698050719) != 0):
                    self.state = 1240
                    self.forExpression(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 595601600475561998) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 257698050719) != 0):
                    self.state = 1243
                    self.expression(0)


                self.state = 1246
                self.match(TinyCParser.Semi)
                self.state = 1248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 595601600475561998) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 257698050719) != 0):
                    self.state = 1247
                    self.forExpression(0)


                self.state = 1250
                self.match(TinyCParser.Semi)
                self.state = 1252
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 595601600475561998) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 257698050719) != 0):
                    self.state = 1251
                    self.forExpression(0)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifiers(self):
            return self.getTypedRuleContext(TinyCParser.DeclarationSpecifiersContext,0)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(TinyCParser.InitDeclaratorListContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_forDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForDeclaration" ):
                listener.enterForDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForDeclaration" ):
                listener.exitForDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForDeclaration" ):
                return visitor.visitForDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def forDeclaration(self):

        localctx = TinyCParser.ForDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_forDeclaration)
        try:
            self.state = 1260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1256
                self.declarationSpecifiers()
                self.state = 1257
                self.initDeclaratorList(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1259
                self.declarationSpecifiers()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(TinyCParser.AssignmentExpressionContext,0)


        def forExpression(self):
            return self.getTypedRuleContext(TinyCParser.ForExpressionContext,0)


        def Comma(self):
            return self.getToken(TinyCParser.Comma, 0)

        def getRuleIndex(self):
            return TinyCParser.RULE_forExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpression" ):
                listener.enterForExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpression" ):
                listener.exitForExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForExpression" ):
                return visitor.visitForExpression(self)
            else:
                return visitor.visitChildren(self)



    def forExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = TinyCParser.ForExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 170
        self.enterRecursionRule(localctx, 170, self.RULE_forExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1263
            self.assignmentExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1270
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = TinyCParser.ForExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_forExpression)
                    self.state = 1265
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1266
                    self.match(TinyCParser.Comma)
                    self.state = 1267
                    self.assignmentExpression() 
                self.state = 1272
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class JumpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Goto(self):
            return self.getToken(TinyCParser.Goto, 0)

        def Identifier(self):
            return self.getToken(TinyCParser.Identifier, 0)

        def Semi(self):
            return self.getToken(TinyCParser.Semi, 0)

        def Continue(self):
            return self.getToken(TinyCParser.Continue, 0)

        def Break(self):
            return self.getToken(TinyCParser.Break, 0)

        def Return(self):
            return self.getToken(TinyCParser.Return, 0)

        def expression(self):
            return self.getTypedRuleContext(TinyCParser.ExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(TinyCParser.UnaryExpressionContext,0)


        def getRuleIndex(self):
            return TinyCParser.RULE_jumpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpStatement" ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpStatement" ):
                listener.exitJumpStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpStatement" ):
                return visitor.visitJumpStatement(self)
            else:
                return visitor.visitChildren(self)




    def jumpStatement(self):

        localctx = TinyCParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_jumpStatement)
        self._la = 0 # Token type
        try:
            self.state = 1289
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1273
                self.match(TinyCParser.Goto)
                self.state = 1274
                self.match(TinyCParser.Identifier)
                self.state = 1275
                self.match(TinyCParser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1276
                self.match(TinyCParser.Continue)
                self.state = 1277
                self.match(TinyCParser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1278
                self.match(TinyCParser.Break)
                self.state = 1279
                self.match(TinyCParser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1280
                self.match(TinyCParser.Return)
                self.state = 1282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 595601600475561998) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & 257698050719) != 0):
                    self.state = 1281
                    self.expression(0)


                self.state = 1284
                self.match(TinyCParser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1285
                self.match(TinyCParser.Goto)
                self.state = 1286
                self.unaryExpression()
                self.state = 1287
                self.match(TinyCParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[1] = self.translationUnit_sempred
        self._predicates[4] = self.declarationList_sempred
        self._predicates[7] = self.genericAssocList_sempred
        self._predicates[9] = self.postfixExpression_sempred
        self._predicates[10] = self.argumentExpressionList_sempred
        self._predicates[14] = self.multiplicativeExpression_sempred
        self._predicates[15] = self.additiveExpression_sempred
        self._predicates[16] = self.shiftExpression_sempred
        self._predicates[17] = self.relationalExpression_sempred
        self._predicates[18] = self.equalityExpression_sempred
        self._predicates[19] = self.andExpression_sempred
        self._predicates[20] = self.exclusiveOrExpression_sempred
        self._predicates[21] = self.inclusiveOrExpression_sempred
        self._predicates[22] = self.logicalAndExpression_sempred
        self._predicates[23] = self.logicalOrExpression_sempred
        self._predicates[27] = self.expression_sempred
        self._predicates[33] = self.initDeclaratorList_sempred
        self._predicates[36] = self.typeSpecifier_sempred
        self._predicates[39] = self.structDeclarationList_sempred
        self._predicates[42] = self.structDeclaratorList_sempred
        self._predicates[45] = self.enumeratorList_sempred
        self._predicates[53] = self.directDeclarator_sempred
        self._predicates[60] = self.typeQualifierList_sempred
        self._predicates[62] = self.parameterList_sempred
        self._predicates[64] = self.identifierList_sempred
        self._predicates[67] = self.directAbstractDeclarator_sempred
        self._predicates[70] = self.initializerList_sempred
        self._predicates[72] = self.designatorList_sempred
        self._predicates[78] = self.blockItemList_sempred
        self._predicates[85] = self.forExpression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def translationUnit_sempred(self, localctx:TranslationUnitContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 1)
         

    def declarationList_sempred(self, localctx:DeclarationListContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def genericAssocList_sempred(self, localctx:GenericAssocListContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def postfixExpression_sempred(self, localctx:PostfixExpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

    def argumentExpressionList_sempred(self, localctx:ArgumentExpressionListContext, predIndex:int):
            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

    def multiplicativeExpression_sempred(self, localctx:MultiplicativeExpressionContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def additiveExpression_sempred(self, localctx:AdditiveExpressionContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 1)
         

    def shiftExpression_sempred(self, localctx:ShiftExpressionContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 1)
         

    def relationalExpression_sempred(self, localctx:RelationalExpressionContext, predIndex:int):
            if predIndex == 17:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 1)
         

    def equalityExpression_sempred(self, localctx:EqualityExpressionContext, predIndex:int):
            if predIndex == 21:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 1)
         

    def andExpression_sempred(self, localctx:AndExpressionContext, predIndex:int):
            if predIndex == 23:
                return self.precpred(self._ctx, 1)
         

    def exclusiveOrExpression_sempred(self, localctx:ExclusiveOrExpressionContext, predIndex:int):
            if predIndex == 24:
                return self.precpred(self._ctx, 1)
         

    def inclusiveOrExpression_sempred(self, localctx:InclusiveOrExpressionContext, predIndex:int):
            if predIndex == 25:
                return self.precpred(self._ctx, 1)
         

    def logicalAndExpression_sempred(self, localctx:LogicalAndExpressionContext, predIndex:int):
            if predIndex == 26:
                return self.precpred(self._ctx, 1)
         

    def logicalOrExpression_sempred(self, localctx:LogicalOrExpressionContext, predIndex:int):
            if predIndex == 27:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 28:
                return self.precpred(self._ctx, 1)
         

    def initDeclaratorList_sempred(self, localctx:InitDeclaratorListContext, predIndex:int):
            if predIndex == 29:
                return self.precpred(self._ctx, 1)
         

    def typeSpecifier_sempred(self, localctx:TypeSpecifierContext, predIndex:int):
            if predIndex == 30:
                return self.precpred(self._ctx, 1)
         

    def structDeclarationList_sempred(self, localctx:StructDeclarationListContext, predIndex:int):
            if predIndex == 31:
                return self.precpred(self._ctx, 1)
         

    def structDeclaratorList_sempred(self, localctx:StructDeclaratorListContext, predIndex:int):
            if predIndex == 32:
                return self.precpred(self._ctx, 1)
         

    def enumeratorList_sempred(self, localctx:EnumeratorListContext, predIndex:int):
            if predIndex == 33:
                return self.precpred(self._ctx, 1)
         

    def directDeclarator_sempred(self, localctx:DirectDeclaratorContext, predIndex:int):
            if predIndex == 34:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 35:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 36:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 37:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 38:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 39:
                return self.precpred(self._ctx, 2)
         

    def typeQualifierList_sempred(self, localctx:TypeQualifierListContext, predIndex:int):
            if predIndex == 40:
                return self.precpred(self._ctx, 1)
         

    def parameterList_sempred(self, localctx:ParameterListContext, predIndex:int):
            if predIndex == 41:
                return self.precpred(self._ctx, 1)
         

    def identifierList_sempred(self, localctx:IdentifierListContext, predIndex:int):
            if predIndex == 42:
                return self.precpred(self._ctx, 1)
         

    def directAbstractDeclarator_sempred(self, localctx:DirectAbstractDeclaratorContext, predIndex:int):
            if predIndex == 43:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 44:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 45:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 46:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 47:
                return self.precpred(self._ctx, 1)
         

    def initializerList_sempred(self, localctx:InitializerListContext, predIndex:int):
            if predIndex == 48:
                return self.precpred(self._ctx, 1)
         

    def designatorList_sempred(self, localctx:DesignatorListContext, predIndex:int):
            if predIndex == 49:
                return self.precpred(self._ctx, 1)
         

    def blockItemList_sempred(self, localctx:BlockItemListContext, predIndex:int):
            if predIndex == 50:
                return self.precpred(self._ctx, 1)
         

    def forExpression_sempred(self, localctx:ForExpressionContext, predIndex:int):
            if predIndex == 51:
                return self.precpred(self._ctx, 1)
         




